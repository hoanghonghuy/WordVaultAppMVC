WordVaultAppMVC/
‚îÇ
‚îú‚îÄ‚îÄ üìÅ Controllers/           ‚Üê X·ª≠ l√Ω logic giao ti·∫øp gi·ªØa View v√† Model
‚îÇ   ‚îú‚îÄ‚îÄ VocabularyController.cs
‚îÇ   ‚îú‚îÄ‚îÄ TopicController.cs
‚îÇ   ‚îú‚îÄ‚îÄ QuizController.cs
‚îÇ   ‚îî‚îÄ‚îÄ LearningController.cs
‚îÇ
‚îî‚îÄ‚îÄ Views/
‚îú‚îÄ‚îÄ Controls/
‚îÇ   ‚îú‚îÄ‚îÄ HomeControl.cs
‚îÇ   ‚îú‚îÄ‚îÄ TopicVocabularyControl.cs
‚îÇ   ‚îú‚îÄ‚îÄ FavoriteWordsControl.cs
‚îÇ   ‚îú‚îÄ‚îÄ DailyReviewControl.cs
‚îÇ   ‚îú‚îÄ‚îÄ ShuffleStudyControl.cs
‚îÇ   ‚îú‚îÄ‚îÄ QuizControl.cs
‚îÇ   ‚îî‚îÄ‚îÄ SettingsControl.cs
‚îÇ
‚îú‚îÄ‚îÄ üìÅ Views/                 ‚Üê WinForm GUI
‚îÇ   ‚îú‚îÄ‚îÄ MainForm
‚îÇ   ‚îú‚îÄ‚îÄ AddTopicForm
‚îÇ   ‚îú‚îÄ‚îÄ VocabularyListForm
‚îÇ   ‚îú‚îÄ‚îÄ QuizForm
‚îÇ   ‚îú‚îÄ‚îÄ DailyReviewForm
‚îÇ   ‚îú‚îÄ‚îÄ ShuffleStudyForm
‚îÇ   ‚îú‚îÄ‚îÄ TopicVocabularyForm
‚îÇ   ‚îî‚îÄ‚îÄ VocabularyDetailPanel
‚îÇ
‚îú‚îÄ‚îÄ üìÅ Data/                  ‚Üê Qu·∫£n l√Ω k·∫øt n·ªëi v√† thao t√°c DB
‚îÇ   ‚îú‚îÄ‚îÄ DatabaseContext.cs   ‚Üê K·∫øt n·ªëi SQL Server
‚îÇ   ‚îú‚îÄ‚îÄ VocabularyRepository.cs
‚îÇ   ‚îú‚îÄ‚îÄ TopicRepository.cs
‚îÇ   ‚îî‚îÄ‚îÄ QuizRepository.cs
‚îÇ
‚îú‚îÄ‚îÄ üìÅ Resources/             ‚Üê L∆∞u file media/audio/icon n·∫øu c·∫ßn
‚îÇ   ‚îî‚îÄ‚îÄ Icons, Sounds...
‚îÇ
‚îú‚îÄ‚îÄ üìÅ Helpers/               ‚Üê Ti·ªán √≠ch chung
‚îÇ   ‚îú‚îÄ‚îÄ AudioHelper.cs       ‚Üê H·ªó tr·ª£ ph√°t audio
‚îÇ   ‚îî‚îÄ‚îÄ DictionaryApiClient
‚îÇ
‚îú‚îÄ‚îÄ üìÑ Program.cs
‚îú‚îÄ‚îÄ üìÑ App.config             ‚Üê N∆°i ƒë·∫∑t connection string (g·ª£i √Ω)
‚îî‚îÄ‚îÄ WordVaultAppMVC.csproj


LearningController:
using System;
using System.Linq;
using System.Windows.Forms;
using WordVaultAppMVC.Models;
using WordVaultAppMVC.Data;

namespace WordVaultAppMVC.Controllers
{
    public class LearningController
    {
        private readonly VocabularyRepository _vocabularyRepository;
        private readonly LearningStatusRepository _learningStatusRepository;

        public LearningController()
        {
            _vocabularyRepository = new VocabularyRepository();
            _learningStatusRepository = new LearningStatusRepository();
        }

        // Ph√¢n lo·∫°i t·ª´ v·ª±ng d·ª±a tr√™n nghƒ©a ng∆∞·ªùi d√πng nh·∫≠p
        public void ClassifyVocabulary(string wordId, string userMeaning)
        {
            // Chuy·ªÉn ƒë·ªïi wordId t·ª´ string sang int
            if (!int.TryParse(wordId, out int id))
            {
                MessageBox.Show("ID t·ª´ kh√¥ng h·ª£p l·ªá!", "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            var word = _vocabularyRepository.GetWordById(id);
            if (word == null)
            {
                MessageBox.Show("T·ª´ v·ª±ng kh√¥ng t·ªìn t·∫°i!", "L·ªói", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            string correctMeaning = word.Meaning;

            if (string.IsNullOrEmpty(userMeaning))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p nghƒ©a c·ªßa t·ª´!", "C·∫£nh b√°o", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (userMeaning.Trim().Equals(correctMeaning, StringComparison.OrdinalIgnoreCase))
            {
                UpdateLearningStatus(wordId, "ƒê√£ h·ªçc");
                MessageBox.Show("Ch√≠nh x√°c! T·ª´ v·ª±ng ƒë√£ ƒë∆∞·ª£c ph√¢n lo·∫°i l√† ƒë√£ h·ªçc.", "K·∫øt qu·∫£", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                UpdateLearningStatus(wordId, "ƒêang h·ªçc");
                MessageBox.Show($"Sai r·ªìi! Nghƒ©a ƒë√∫ng l√†: {correctMeaning}", "K·∫øt qu·∫£", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void UpdateLearningStatus(string wordId, string status)
        {
            var existingStatus = _learningStatusRepository.GetLearningStatusByWordId(wordId);
            if (existingStatus != null)
            {
                existingStatus.Status = status;
                _learningStatusRepository.UpdateLearningStatus(existingStatus);
            }
            else
            {
                var newStatus = new LearningStatus
                {
                    WordId = wordId,
                    Status = status,
                    DateLearned = DateTime.Now
                };
                _learningStatusRepository.AddLearningStatus(newStatus);
            }
        }

        public void GetLearnedVocabulary()
        {
            var learnedWords = _learningStatusRepository.GetAllLearningStatus()
                .Where(ls => ls.Status == "ƒê√£ h·ªçc")
                .Select(ls =>
                {
                    // Chuy·ªÉn ƒë·ªïi ls.WordId t·ª´ string sang int
                    if (int.TryParse(ls.WordId, out int id))
                        return _vocabularyRepository.GetWordById(id);
                    return null;
                })
                .Where(w => w != null)
                .ToList();

            if (learnedWords.Count > 0)
            {
                string learnedWordsList = string.Join(Environment.NewLine, learnedWords.Select(w => w.Word));
                MessageBox.Show($"C√°c t·ª´ v·ª±ng ƒë√£ h·ªçc:\n{learnedWordsList}", "Danh s√°ch t·ª´ v·ª±ng ƒë√£ h·ªçc", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("Ch∆∞a c√≥ t·ª´ v·ª±ng n√†o ƒë∆∞·ª£c h·ªçc!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public void GetLearningVocabulary()
        {
            var learningWords = _learningStatusRepository.GetAllLearningStatus()
                .Where(ls => ls.Status == "ƒêang h·ªçc")
                .Select(ls =>
                {
                    if (int.TryParse(ls.WordId, out int id))
                        return _vocabularyRepository.GetWordById(id);
                    return null;
                })
                .Where(w => w != null)
                .ToList();

            if (learningWords.Count > 0)
            {
                string learningWordsList = string.Join(Environment.NewLine, learningWords.Select(w => w.Word));
                MessageBox.Show($"C√°c t·ª´ v·ª±ng ƒëang h·ªçc:\n{learningWordsList}", "Danh s√°ch t·ª´ v·ª±ng ƒëang h·ªçc", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("Kh√¥ng c√≥ t·ª´ v·ª±ng n√†o ƒëang h·ªçc!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public void GetUnlearnedVocabulary()
        {
            var unlearnedWords = _learningStatusRepository.GetAllLearningStatus()
                .Where(ls => ls.Status == "Ch∆∞a h·ªçc")
                .Select(ls =>
                {
                    if (int.TryParse(ls.WordId, out int id))
                        return _vocabularyRepository.GetWordById(id);
                    return null;
                })
                .Where(w => w != null)
                .ToList();

            if (unlearnedWords.Count > 0)
            {
                string unlearnedWordsList = string.Join(Environment.NewLine, unlearnedWords.Select(w => w.Word));
                MessageBox.Show($"C√°c t·ª´ v·ª±ng ch∆∞a h·ªçc:\n{unlearnedWordsList}", "Danh s√°ch t·ª´ v·ª±ng ch∆∞a h·ªçc", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("T·∫•t c·∫£ t·ª´ v·ª±ng ƒë√£ ƒë∆∞·ª£c h·ªçc!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
    }
}


QuizController:
using System;
using System.Collections.Generic;
using WordVaultAppMVC.Data;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Controllers
{
    public class QuizController
    {
        private readonly QuizRepository _quizRepository;

        public QuizController()
        {
            _quizRepository = new QuizRepository();
        }

        // L·∫•y danh s√°ch c√°c c√¢u h·ªèi quiz
        public List<QuizQuestion> GetQuizQuestions()
        {
            // Gi·∫£ s·ª≠ QuizRepository c√≥ ph∆∞∆°ng th·ª©c GetAllQuizQuestions() tr·∫£ v·ªÅ danh s√°ch QuizQuestion
            return _quizRepository.GetAllQuizQuestions();
        }

        // X·ª≠ l√Ω vi·ªác n·ªôp ƒë√°p √°n cho m·ªôt c√¢u h·ªèi quiz
        // selectedOption l√† s·ªë th·ª© t·ª± c·ªßa ƒë√°p √°n ng∆∞·ªùi d√πng ch·ªçn (v√≠ d·ª•: 1,2,3,4)
        public bool SubmitQuizAnswer(int quizId, int selectedOption)
        {
            // L·∫•y c√¢u h·ªèi quiz theo ID
            QuizQuestion quizQuestion = _quizRepository.GetQuizQuestionById(quizId);
            if (quizQuestion == null)
            {
                throw new Exception("C√¢u h·ªèi quiz kh√¥ng t·ªìn t·∫°i!");
            }

            // Ki·ªÉm tra ƒë√°p √°n
            bool isCorrect = (quizQuestion.CorrectOption == selectedOption);

            // Ghi nh·∫≠n k·∫øt qu·∫£ l√†m quiz
            QuizResult result = new QuizResult
            {
                QuizId = quizId,
                IsCorrect = isCorrect,
                DateTaken = DateTime.Now
                // N·∫øu c√≥ th√¥ng tin UserId, b·∫°n c√≥ th·ªÉ th√™m v√†o ƒë√¢y
            };

            _quizRepository.AddQuizResult(result);
            return isCorrect;
        }
    }

    // Model ph·ª• ƒë·∫°i di·ªán cho c√¢u h·ªèi quiz (c√≥ th·ªÉ m·ªü r·ªông)
    public class QuizQuestion
    {
        public int QuizId { get; set; }
        public string QuestionText { get; set; }
        public List<string> Options { get; set; }
        public int CorrectOption { get; set; }
    }
}

TopicController:
using System;
using System.Collections.Generic;
using WordVaultAppMVC.Data;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Controllers
{
    public class TopicController
    {
        private readonly TopicRepository _topicRepository;

        public TopicController()
        {
            _topicRepository = new TopicRepository();
        }

        // L·∫•y danh s√°ch ch·ªß ƒë·ªÅ
        public List<Topic> GetTopics()
        {
            return _topicRepository.GetAllTopics();
        }

        // Th√™m m·ªôt ch·ªß ƒë·ªÅ m·ªõi
        public void AddTopic(string topicName)
        {
            if (string.IsNullOrWhiteSpace(topicName))
            {
                throw new ArgumentException("T√™n ch·ªß ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }

            _topicRepository.AddTopic(topicName);
        }
    }
}

VocabularyController:
using System;
using System.Collections.Generic;
using WordVaultAppMVC.Data;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Controllers
{
    public class VocabularyController
    {
        private readonly VocabularyRepository _vocabularyRepository;

        public VocabularyController()
        {
            _vocabularyRepository = new VocabularyRepository();
        }

        // L·∫•y danh s√°ch t·ª´ v·ª±ng
        public List<Vocabulary> GetAllVocabulary()
        {
            return _vocabularyRepository.GetAllVocabulary();
        }

        // L·∫•y danh s√°ch t·ª´ v·ª±ng theo ch·ªß ƒë·ªÅ
        public List<Vocabulary> GetVocabularyByTopic(string topic)
        {
            return _vocabularyRepository.GetVocabularyByTopic(topic);
        }

        // X√≥a t·ª´ v·ª±ng theo ID
        public void RemoveVocabulary(int id)
        {
            _vocabularyRepository.DeleteVocabulary(id);
        }

        // Th√™m t·ª´ v·ª±ng m·ªõi
        public void AddVocabulary(string word, string meaning, string pronunciation, string audioUrl)
        {
            if (string.IsNullOrWhiteSpace(word))
            {
                throw new ArgumentException("T·ª´ v·ª±ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }

            _vocabularyRepository.AddVocabulary(word, meaning, pronunciation, audioUrl);
        }
    }
}


DatabaseContext:
using System.Configuration;
using System.Data.SqlClient;

namespace WordVaultAppMVC.Data
{
    public static class DatabaseContext
    {
        private static string connectionString = ConfigurationManager.ConnectionStrings["WordVaultDb"].ConnectionString;

        public static SqlConnection GetConnection()
        {
            return new SqlConnection(connectionString);
        }
    }
}

LearningStatusRepository:
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Data
{
    public class LearningStatusRepository
    {
        // L·∫•y tr·∫°ng th√°i h·ªçc c·ªßa t·ª´ v·ª±ng theo WordId
        public LearningStatus GetLearningStatusByWordId(string wordId)
        {
            LearningStatus status = null;

            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = "SELECT * FROM LearningStatuses WHERE WordId = @WordId";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.Add("@WordId", SqlDbType.NVarChar, 50).Value = wordId;
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                status = new LearningStatus
                                {
                                    Id = reader["Id"] != DBNull.Value ? (int)reader["Id"] : 0,
                                    WordId = reader["WordId"].ToString(),
                                    UserId = reader["UserId"].ToString(),
                                    Status = reader["Status"].ToString(),
                                    DateLearned = reader["DateLearned"] == DBNull.Value ? DateTime.MinValue : (DateTime)reader["DateLearned"]
                                };
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói khi l·∫•y LearningStatus: {ex.Message}");
            }

            return status;
        }


        // Th√™m tr·∫°ng th√°i h·ªçc m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
        public void AddLearningStatus(LearningStatus status)
        {
            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = @"INSERT INTO LearningStatuses (WordId, UserId, Status, DateLearned)
                                     VALUES (@WordId, @UserId, @Status, @DateLearned)";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.Add("@WordId", SqlDbType.NVarChar, 50).Value = status.WordId;
                        cmd.Parameters.Add("@UserId", SqlDbType.NVarChar, 50).Value = status.UserId;
                        cmd.Parameters.Add("@Status", SqlDbType.NVarChar, 50).Value = status.Status;
                        cmd.Parameters.Add("@DateLearned", SqlDbType.DateTime).Value = status.DateLearned;

                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                // X·ª≠ l√Ω l·ªói ho·∫∑c ghi log n·∫øu c·∫ßn
                Console.WriteLine($"L·ªói khi th√™m LearningStatus: {ex.Message}");
            }
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i h·ªçc hi·ªán c√≥
        public void UpdateLearningStatus(LearningStatus status)
        {
            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = @"UPDATE LearningStatuses 
                                     SET UserId = @UserId, Status = @Status, DateLearned = @DateLearned 
                                     WHERE WordId = @WordId";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.Add("@UserId", SqlDbType.NVarChar, 50).Value = status.UserId;
                        cmd.Parameters.Add("@Status", SqlDbType.NVarChar, 50).Value = status.Status;
                        cmd.Parameters.Add("@DateLearned", SqlDbType.DateTime).Value = status.DateLearned;
                        cmd.Parameters.Add("@WordId", SqlDbType.NVarChar, 50).Value = status.WordId;

                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                // X·ª≠ l√Ω l·ªói ho·∫∑c ghi log n·∫øu c·∫ßn
                Console.WriteLine($"L·ªói khi c·∫≠p nh·∫≠t LearningStatus: {ex.Message}");
            }
        }

        // L·∫•y danh s√°ch t·∫•t c·∫£ tr·∫°ng th√°i h·ªçc
        public List<LearningStatus> GetAllLearningStatus()
        {
            List<LearningStatus> statuses = new List<LearningStatus>();

            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = "SELECT * FROM LearningStatuses";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            statuses.Add(new LearningStatus
                            {
                                Id = (int)reader["Id"],
                                WordId = reader["WordId"].ToString(),
                                UserId = reader["UserId"].ToString(),
                                Status = reader["Status"].ToString(),
                                DateLearned = reader["DateLearned"] == DBNull.Value ? DateTime.MinValue : (DateTime)reader["DateLearned"]
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // X·ª≠ l√Ω l·ªói ho·∫∑c ghi log n·∫øu c·∫ßn
                Console.WriteLine($"L·ªói khi l·∫•y danh s√°ch LearningStatus: {ex.Message}");
            }

            return statuses;
        }
    }
}

QuizRepository:
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using WordVaultAppMVC.Controllers;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Data
{
    public class QuizRepository
    {
        // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c c√¢u h·ªèi quiz t·ª´ b·∫£ng QuizQuestions
        public List<QuizQuestion> GetAllQuizQuestions()
        {
            List<QuizQuestion> questions = new List<QuizQuestion>();
            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    // Gi·∫£ s·ª≠ b·∫£ng QuizQuestions c√≥ c√°c c·ªôt nh∆∞ m√¥ t·∫£
                    string query = "SELECT QuizId, QuestionText, Option1, Option2, Option3, Option4, CorrectOption FROM QuizQuestions";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            QuizQuestion question = new QuizQuestion
                            {
                                QuizId = (int)reader["QuizId"],
                                QuestionText = reader["QuestionText"].ToString(),
                                Options = new List<string>
                                {
                                    reader["Option1"].ToString(),
                                    reader["Option2"].ToString(),
                                    reader["Option3"].ToString(),
                                    reader["Option4"].ToString()
                                },
                                CorrectOption = Convert.ToInt32(reader["CorrectOption"])
                            };
                            questions.Add(question);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in GetAllQuizQuestions: " + ex.Message);
            }
            return questions;
        }

        // L·∫•y m·ªôt c√¢u h·ªèi quiz theo ID
        public QuizQuestion GetQuizQuestionById(int quizId)
        {
            QuizQuestion question = null;
            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = "SELECT QuizId, QuestionText, Option1, Option2, Option3, Option4, CorrectOption FROM QuizQuestions WHERE QuizId = @QuizId";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.Add("@QuizId", SqlDbType.Int).Value = quizId;
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                question = new QuizQuestion
                                {
                                    QuizId = (int)reader["QuizId"],
                                    QuestionText = reader["QuestionText"].ToString(),
                                    Options = new List<string>
                                    {
                                        reader["Option1"].ToString(),
                                        reader["Option2"].ToString(),
                                        reader["Option3"].ToString(),
                                        reader["Option4"].ToString()
                                    },
                                    CorrectOption = Convert.ToInt32(reader["CorrectOption"])
                                };
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in GetQuizQuestionById: " + ex.Message);
            }
            return question;
        }

        // Th√™m k·∫øt qu·∫£ l√†m quiz v√†o b·∫£ng QuizResults
        public void AddQuizResult(QuizResult result)
        {
            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = "INSERT INTO QuizResults (QuizId, IsCorrect, DateTaken, UserId) VALUES (@QuizId, @IsCorrect, @DateTaken, @UserId)";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.Add("@QuizId", SqlDbType.Int).Value = result.QuizId;
                        cmd.Parameters.Add("@IsCorrect", SqlDbType.Bit).Value = result.IsCorrect;
                        cmd.Parameters.Add("@DateTaken", SqlDbType.DateTime).Value = result.DateTaken;
                        // N·∫øu kh√¥ng c√≥ UserId, c√≥ th·ªÉ truy·ªÅn chu·ªói r·ªóng ho·∫∑c NULL t√πy thi·∫øt k·∫ø c·ªßa b·∫°n
                        cmd.Parameters.Add("@UserId", SqlDbType.NVarChar, 50).Value = string.IsNullOrEmpty(result.UserId) ? (object)DBNull.Value : result.UserId;
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in AddQuizResult: " + ex.Message);
            }
        }
    }
}

TopicRepository:
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Data
{
    public class TopicRepository
    {
        // L·∫•y t·∫•t c·∫£ ch·ªß ƒë·ªÅ t·ª´ b·∫£ng Topics
        public List<Topic> GetAllTopics()
        {
            List<Topic> topics = new List<Topic>();

            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = "SELECT * FROM Topics";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            topics.Add(new Topic
                            {
                                Id = (int)reader["Id"],
                                Name = reader["Name"].ToString()
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // Log l·ªói ho·∫∑c x·ª≠ l√Ω ngo·∫°i l·ªá theo y√™u c·∫ßu
                Console.WriteLine("Error in GetAllTopics: " + ex.Message);
            }

            return topics;
        }

        // Th√™m m·ªôt ch·ªß ƒë·ªÅ m·ªõi v√†o b·∫£ng Topics
        public void AddTopic(string topicName)
        {
            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = "INSERT INTO Topics (Name) VALUES (@Name)";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.Add("@Name", SqlDbType.NVarChar, 100).Value = topicName;
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                // Log l·ªói ho·∫∑c x·ª≠ l√Ω ngo·∫°i l·ªá theo y√™u c·∫ßu
                Console.WriteLine("Error in AddTopic: " + ex.Message);
            }
        }

        // B·∫°n c√≥ th·ªÉ b·ªï sung th√™m c√°c ph∆∞∆°ng th·ª©c UpdateTopic, DeleteTopic n·∫øu c·∫ßn
    }
}

VocabularyRepository:
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Data
{
    public class VocabularyRepository
    {
        // Constants for column and table names
        private const string TableName = "Vocabulary";
        private const string ColumnId = "Id";
        private const string ColumnWord = "Word";
        private const string ColumnMeaning = "Meaning";
        private const string ColumnPronunciation = "Pronunciation";
        private const string ColumnAudioUrl = "AudioUrl";

        // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c t·ª´ v·ª±ng t·ª´ c∆° s·ªü d·ªØ li·ªáu
        public List<Vocabulary> GetAllVocabulary()
        {
            List<Vocabulary> vocabularies = new List<Vocabulary>();

            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = $"SELECT * FROM {TableName}";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            vocabularies.Add(new Vocabulary
                            {
                                Id = (int)reader[ColumnId],
                                Word = reader[ColumnWord].ToString(),
                                Meaning = reader[ColumnMeaning].ToString(),
                                Pronunciation = reader[ColumnPronunciation].ToString(),
                                AudioUrl = reader[ColumnAudioUrl].ToString()
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // Log l·ªói v√†o h·ªá th·ªëng log chuy√™n d·ª•ng
                Console.WriteLine($"Error in GetAllVocabulary: {ex.Message}");
            }

            return vocabularies;
        }

        // L·∫•y t·ª´ v·ª±ng theo t·ª´ kh√≥a
        public Vocabulary GetVocabularyByWord(string word)
        {
            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = $"SELECT * FROM {TableName} WHERE {ColumnWord} = @Word";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.Add("@Word", SqlDbType.NVarChar, 100).Value = word;
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                return new Vocabulary
                                {
                                    Id = (int)reader[ColumnId],
                                    Word = reader[ColumnWord].ToString(),
                                    Meaning = reader[ColumnMeaning].ToString(),
                                    Pronunciation = reader[ColumnPronunciation].ToString(),
                                    AudioUrl = reader[ColumnAudioUrl].ToString()
                                };
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in GetVocabularyByWord: {ex.Message}");
            }
            return null;
        }

        // Th√™m m·ªôt t·ª´ v·ª±ng m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
        public void AddVocabulary(string word, string meaning, string pronunciation, string audioUrl)
        {
            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = $"INSERT INTO {TableName} ({ColumnWord}, {ColumnMeaning}, {ColumnPronunciation}, {ColumnAudioUrl}) " +
                                   "VALUES (@Word, @Meaning, @Pronunciation, @AudioUrl)";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.Add("@Word", SqlDbType.NVarChar, 100).Value = word;
                        cmd.Parameters.Add("@Meaning", SqlDbType.NVarChar, 500).Value = meaning;
                        cmd.Parameters.Add("@Pronunciation", SqlDbType.NVarChar, 100).Value = pronunciation;
                        cmd.Parameters.Add("@AudioUrl", SqlDbType.NVarChar, 300).Value = audioUrl;
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in AddVocabulary: {ex.Message}");
            }
        }

        // C·∫≠p nh·∫≠t m·ªôt t·ª´ v·ª±ng v√†o c∆° s·ªü d·ªØ li·ªáu (c√≥ th·ªÉ c·∫ßn trong t∆∞∆°ng lai)
        public void UpdateVocabulary(int id, string word, string meaning, string pronunciation, string audioUrl)
        {
            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = $"UPDATE {TableName} SET {ColumnWord} = @Word, {ColumnMeaning} = @Meaning, " +
                                   $"{ColumnPronunciation} = @Pronunciation, {ColumnAudioUrl} = @AudioUrl WHERE {ColumnId} = @Id";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.Add("@Id", SqlDbType.Int).Value = id;
                        cmd.Parameters.Add("@Word", SqlDbType.NVarChar, 100).Value = word;
                        cmd.Parameters.Add("@Meaning", SqlDbType.NVarChar, 500).Value = meaning;
                        cmd.Parameters.Add("@Pronunciation", SqlDbType.NVarChar, 100).Value = pronunciation;
                        cmd.Parameters.Add("@AudioUrl", SqlDbType.NVarChar, 300).Value = audioUrl;
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in UpdateVocabulary: {ex.Message}");
            }
        }

        // L·∫•y t·ª´ v·ª±ng theo Id (theo ki·ªÉu int)
        public Vocabulary GetVocabularyById(int id)
        {
            Vocabulary vocab = null;
            try
            {
                using (SqlConnection conn = DatabaseContext.GetConnection())
                {
                    conn.Open();
                    string query = $"SELECT * FROM {TableName} WHERE {ColumnId} = @Id";
                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.Add("@Id", SqlDbType.Int).Value = id;
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                vocab = new Vocabulary
                                {
                                    Id = (int)reader[ColumnId],
                                    Word = reader[ColumnWord].ToString(),
                                    Meaning = reader[ColumnMeaning].ToString(),
                                    Pronunciation = reader[ColumnPronunciation].ToString(),
                                    AudioUrl = reader[ColumnAudioUrl].ToString()
                                };
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in GetVocabularyById: " + ex.Message);
            }
            return vocab;
        }

        // Ph∆∞∆°ng th·ª©c x√≥a t·ª´ v·ª±ng theo ID
        public void DeleteVocabulary(int id)
        {
            using (var connection = DatabaseContext.GetConnection())
            {
                connection.Open();
                string query = $"DELETE FROM {TableName} WHERE {ColumnId} = @Id";
                using (SqlCommand cmd = new SqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@Id", id);
                    cmd.ExecuteNonQuery();
                }
            }
        }

        // Ph∆∞∆°ng th·ª©c l·∫•y t·ª´ v·ª±ng theo Id (c√≥ th·ªÉ tr·∫£ v·ªÅ th√¥ng tin b·ªï sung)
        public Vocabulary GetWordById(int id)
        {
            using (var connection = DatabaseContext.GetConnection())
            {
                connection.Open();
                string query = $"SELECT * FROM {TableName} WHERE {ColumnId} = @Id";
                using (SqlCommand cmd = new SqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@Id", id);
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return new Vocabulary
                            {
                                Id = (int)reader["Id"],
                                Word = reader["Word"].ToString(),
                                // N·∫øu c√≥ c√°c c·ªôt ri√™ng bi·ªát cho nghƒ©a v√† ph√°t √¢m (v√≠ d·ª•: MeaningVN, PronunciationUS)
                                // ki·ªÉm tra v√† thay ƒë·ªïi cho ph√π h·ª£p:
                                Meaning = reader["Meaning"].ToString(),
                                Pronunciation = reader["Pronunciation"].ToString(),
                                AudioUrl = reader["AudioUrl"].ToString()
                            };
                        }
                    }
                }
            }
            return null;
        }

        // L·∫•y danh s√°ch t·ª´ v·ª±ng theo ch·ªß ƒë·ªÅ s·ª≠ d·ª•ng JOIN v·ªõi b·∫£ng VocabularyTopic v√† Topics
        public List<Vocabulary> GetVocabularyByTopic(string topic)
        {
            var vocabularyList = new List<Vocabulary>();

            using (var connection = DatabaseContext.GetConnection())
            {
                connection.Open();
                string query = @"SELECT v.Id, v.Word, v.Meaning, v.Pronunciation, v.AudioUrl 
                                 FROM Vocabulary v
                                 INNER JOIN VocabularyTopic vt ON v.Id = vt.VocabularyId
                                 INNER JOIN Topics t ON vt.TopicId = t.Id
                                 WHERE t.Name = @Topic";
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Topic", topic);
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var vocabulary = new Vocabulary
                            {
                                Id = Convert.ToInt32(reader["Id"]),
                                Word = reader["Word"].ToString(),
                                Meaning = reader["Meaning"].ToString(),
                                Pronunciation = reader["Pronunciation"].ToString(),
                                AudioUrl = reader["AudioUrl"].ToString()
                            };
                            vocabularyList.Add(vocabulary);
                        }
                    }
                }
            }

            return vocabularyList;
        }
    }
}

AudioHelper:
using System;
using WMPLib;

namespace WordVaultAppMVC.Helpers
{
    public static class AudioHelper
    {
        private static WindowsMediaPlayer _player = new WindowsMediaPlayer();

        public static void PlayAudio(string audioUrl)
        {
            if (string.IsNullOrEmpty(audioUrl))
            {
                System.Windows.Forms.MessageBox.Show("URL √¢m thanh kh√¥ng h·ª£p l·ªá.");
                return;
            }

            try
            {
                _player.URL = audioUrl;
                _player.controls.play();
            }
            catch (Exception ex)
            {
                System.Windows.Forms.MessageBox.Show("L·ªói khi ph√°t √¢m thanh: " + ex.Message);
            }
        }
    }
}

DictionaryApiClient:
using System;
using System.Net.Http;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Windows.Forms;
using WordVaultAppMVC.Models;
using Newtonsoft.Json.Linq;

namespace WordVaultAppMVC.Helpers
{
    public static class DictionaryApiClient
    {
        // S·ª≠ d·ª•ng HttpClient ƒë·ªÉ t√°i s·ª≠ d·ª•ng k·∫øt n·ªëi v√† c·∫£i thi·ªán hi·ªáu su·∫•t
        private static readonly HttpClient httpClient = new HttpClient()
        {
            Timeout = TimeSpan.FromSeconds(30)  // ƒê·∫∑t timeout l√™n 30 gi√¢y
        };

        // H√†m b·∫•t ƒë·ªìng b·ªô l·∫•y chi ti·∫øt t·ª´ ƒëi·ªÉn
        public static async Task<WordDetails> GetWordDetailsAsync(string word)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(word))
                    return null;

                string url = $"https://api.dictionaryapi.dev/api/v2/entries/en/{word.Trim().ToLower()}";

                // G·ª≠i y√™u c·∫ßu GET ƒë·∫øn API
                HttpResponseMessage response = await httpClient.GetAsync(url);

                if (!response.IsSuccessStatusCode)
                {
                    MessageBox.Show($"Kh√¥ng t√¨m th·∫•y t·ª´ \"{word}\" ho·∫∑c API tr·∫£ v·ªÅ m√£ l·ªói: {(int)response.StatusCode}");
                    return null;
                }

                // ƒê·ªçc d·ªØ li·ªáu JSON t·ª´ API
                string jsonString = await response.Content.ReadAsStringAsync();
                var root = JsonConvert.DeserializeObject<DictionaryApiResponse[]>(jsonString);

                if (root == null || root.Length == 0)
                    return null;

                var entry = root[0];

                // L·∫•y ph√°t √¢m
                // ∆Øu ti√™n ph√°t √¢m US
                string pronunciation = entry.phonetics?
                    .FirstOrDefault(p => p.audio != null && p.audio.Contains("us.mp3"))?.text
                    ?? entry.phonetics?.FirstOrDefault(p => !string.IsNullOrEmpty(p.text))?.text
                    ?? "";
                //string pronunciation = entry.phonetics?.FirstOrDefault(p => !string.IsNullOrEmpty(p.text))?.text ?? "";

                // L·∫•y URL √¢m thanh ph√°t √¢m
                string audioUrl = entry.phonetics?
                    .FirstOrDefault(p => p.audio != null && p.audio.Contains("us.mp3"))?.audio
                    ?? entry.phonetics?.FirstOrDefault(p => !string.IsNullOrEmpty(p.audio))?.audio
                    ?? "";

                //string audioUrl = entry.phonetics?.FirstOrDefault(p => !string.IsNullOrEmpty(p.audio))?.audio ?? "";
                // L·∫•y nghƒ©a c·ªßa t·ª´
                string meaning = entry.meanings?
                    .FirstOrDefault()?
                    .definitions?
                    .FirstOrDefault()?
                    .definition ?? "Kh√¥ng r√µ nghƒ©a.";

                return new WordDetails
                {
                    Word = entry.word,
                    Pronunciation = pronunciation,
                    AudioUrl = audioUrl,
                    Meaning = meaning
                };
            }
            catch (TaskCanceledException)
            {
                MessageBox.Show("Y√™u c·∫ßu API b·ªã h·ªßy do qu√° th·ªùi gian ch·ªù (timeout). H√£y ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.");
                return null;
            }
            catch (HttpRequestException ex)
            {
                MessageBox.Show("L·ªói m·∫°ng ho·∫∑c l·ªói khi g·ªçi API: " + ex.Message);
                return null;
            }
            catch (Exception ex)
            {
                MessageBox.Show("L·ªói kh√¥ng x√°c ƒë·ªãnh: " + ex.Message);
                return null;
            }
        }
        // Change 1:
        //public static async Task<string> TranslateToVietnamese(string text)
        //{
        //    using (HttpClient client = new HttpClient())
        //    {
        //        string url = $"https://api.mymemory.translated.net/get?q={Uri.EscapeDataString(text)}&langpair=en|vi";
        //        string json = await client.GetStringAsync(url);
        //        var data = Newtonsoft.Json.Linq.JObject.Parse(json);
        //        return data["responseData"]?["translatedText"]?.ToString();
        //    }
        //}
        public static async Task<string> TranslateToVietnamese(string text)
        {
            using (HttpClient client = new HttpClient())
            {
                var url = $"https://api.mymemory.translated.net/get?q={Uri.EscapeDataString(text)}&langpair=en|vi";
                var response = await client.GetStringAsync(url);
                var json = JObject.Parse(response);
                return json["responseData"]?["translatedText"]?.ToString() ?? "";
            }
        }



        // ‚ùå B·ªè h√†m ƒë·ªìng b·ªô n√†y v√¨ c√≥ th·ªÉ g√¢y treo ·ª©ng d·ª•ng trong WinForms
        // public static WordDetails GetWordDetails(string word)
        // {
        //     return GetWordDetailsAsync(word).GetAwaiter().GetResult();
        // }

        // === M√¥ h√¨nh JSON t·ª´ dictionaryapi.dev ===
        private class DictionaryApiResponse
        {
            public string word { get; set; }
            public Phonetic[] phonetics { get; set; }
            public Meaning[] meanings { get; set; }
        }

        private class Phonetic
        {
            public string text { get; set; }
            public string audio { get; set; }
        }

        private class Meaning
        {
            public string partOfSpeech { get; set; }
            public Definition[] definitions { get; set; }
        }

        private class Definition
        {
            public string definition { get; set; }
        }
    }
}



LearningStatus:
using System;

namespace WordVaultAppMVC.Models
{
    public class LearningStatus
    {
        public int Id { get; set; }
        public string WordId { get; set; }    // ID c·ªßa t·ª´ v·ª±ng (c√≥ th·ªÉ l√† string n·∫øu b·∫°n l∆∞u d∆∞·ªõi d·∫°ng NVARCHAR)
        public string UserId { get; set; }    // ID ng∆∞·ªùi d√πng (n·∫øu √°p d·ª•ng)
        public string Status { get; set; }    // V√≠ d·ª•: "Ch∆∞a h·ªçc", "ƒêang h·ªçc", "ƒê√£ h·ªçc"
        public DateTime DateLearned { get; set; } // Ng√†y h·ªçc ho·∫∑c √¥n t·∫≠p (n·∫øu c√≥)
    }
}

QuizResult:
using System;

namespace WordVaultAppMVC.Models
{
    public class QuizResult
    {
        public int Id { get; set; }
        public int QuizId { get; set; }       // ID c·ªßa c√¢u h·ªèi quiz
        public bool IsCorrect { get; set; }   // True n·∫øu ƒë√°p √°n ƒë√∫ng, False n·∫øu sai
        public DateTime DateTaken { get; set; } // Ng√†y l√†m b√†i quiz
        public string UserId { get; set; }    // ID ng∆∞·ªùi d√πng (n·∫øu c·∫ßn)
    }
}

Topic:
namespace WordVaultAppMVC.Models
{
    public class Topic
    {
        public int Id { get; set; }
        public string Name { get; set; }      // T√™n ch·ªß ƒë·ªÅ t·ª´ v·ª±ng
    }
}

Vocabulary:
namespace WordVaultAppMVC.Models
{
    public class Vocabulary
    {
        public int Id { get; set; }
        public string Word { get; set; }          // T·ª´ v·ª±ng
        public string Meaning { get; set; }         // Nghƒ©a c·ªßa t·ª´
        public string Pronunciation { get; set; }   // Ph√°t √¢m (v√≠ d·ª•: /Àà…õ…°z√¶mp…ôl/)
        public string AudioUrl { get; set; }        // URL √¢m thanh ph√°t √¢m
    }
}

VocabularyTopic:
namespace WordVaultAppMVC.Models
{
    // L·ªõp trung gian ƒë·ªÉ li√™n k·∫øt t·ª´ v·ª±ng v√† ch·ªß ƒë·ªÅ (quan h·ªá nhi·ªÅu - nhi·ªÅu)
    public class VocabularyTopic
    {
        public int VocabularyId { get; set; }
        public int TopicId { get; set; }
    }
}

WordDetails:
using System.Collections.Generic;

namespace WordVaultAppMVC.Models
{
    public class WordDetails
    {
        public string Word { get; set; }
        public string Pronunciation { get; set; }
        public string AudioUrl { get; set; }
        public string Meaning { get; set; }

        // M·ªü r·ªông th√™m n·∫øu b·∫°n mu·ªën d√πng sau:
        public List<string> AllMeanings { get; set; } = new List<string>();
        public string PartOfSpeech { get; set; } // noun, verb...
        public List<string> ExampleSentences { get; set; } = new List<string>();
    }
}

VocabularyService:
using System;
using System.Collections.Generic;
using WordVaultAppMVC.Data;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Services
{
    public class VocabularyService
    {
        private readonly VocabularyRepository _vocabularyRepository;
        private static readonly Random rnd = new Random();

        public VocabularyService()
        {
            _vocabularyRepository = new VocabularyRepository();
        }

        /// <summary>
        /// L·∫•y m·ªôt t·ª´ v·ª±ng ng·∫´u nhi√™n t·ª´ c∆° s·ªü d·ªØ li·ªáu.
        /// Tr·∫£ v·ªÅ t·ª´ v·ª±ng v√† ID c·ªßa n√≥ qua out parameter.
        /// </summary>
        public string GetRandomWord(out string wordId)
        {
            List<Vocabulary> vocabularies = _vocabularyRepository.GetAllVocabulary();
            if (vocabularies == null || vocabularies.Count == 0)
            {
                wordId = null;
                return string.Empty;
            }
            int index = rnd.Next(vocabularies.Count);
            wordId = vocabularies[index].Id.ToString();
            return vocabularies[index].Word;
        }

        /// <summary>
        /// L·∫•y nghƒ©a c·ªßa t·ª´ v·ª±ng theo ID.
        /// </summary>
        public string GetWordMeaning(string wordId)
        {
            if (int.TryParse(wordId, out int id))
            {
                Vocabulary vocab = _vocabularyRepository.GetVocabularyById(id);
                if (vocab != null)
                {
                    return vocab.Meaning;
                }
            }
            return "Kh√¥ng t√¨m th·∫•y nghƒ©a!";
        }
    }
}

AddTopicForm:
// AddToTopicForm.cs (c√≥ th√™m t·∫°o topic m·ªõi)
using System;
using System.Data.SqlClient;
using System.Windows.Forms;
using WordVaultAppMVC.Data;

namespace WordVaultAppMVC.Views
{
    public partial class AddToTopicForm : Form
    {
        private readonly string word;

        public AddToTopicForm(string word)
        {
            InitializeComponent();
            this.word = word;
            lblWord.Text = $"T·ª´: {word}";
            LoadTopics();
        }

        private void LoadTopics()
        {
            cboTopics.Items.Clear();
            using (var conn = DatabaseContext.GetConnection())
            {
                conn.Open();
                using (var cmd = new SqlCommand("SELECT Id, Name FROM Topics", conn))
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        cboTopics.Items.Add(new ComboBoxItem(reader.GetInt32(0), reader.GetString(1)));
                    }
                }
            }
            if (cboTopics.Items.Count > 0)
                cboTopics.SelectedIndex = 0;
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            if (cboTopics.SelectedItem is ComboBoxItem selectedTopic)
            {
                AddWordToTopic(selectedTopic.Id);
            }
            else
            {
                MessageBox.Show("Vui l√≤ng ch·ªçn m·ªôt ch·ªß ƒë·ªÅ.");
            }
        }

        private void AddWordToTopic(int topicId)
        {
            using (var conn = DatabaseContext.GetConnection())
            {
                conn.Open();

                var getWordIdCmd = new SqlCommand("SELECT Id FROM Vocabulary WHERE Word = @Word", conn);
                getWordIdCmd.Parameters.AddWithValue("@Word", word);
                var wordIdObj = getWordIdCmd.ExecuteScalar();

                if (wordIdObj == null)
                {
                    MessageBox.Show("Kh√¥ng t√¨m th·∫•y t·ª´ n√†y trong c∆° s·ªü d·ªØ li·ªáu.");
                    return;
                }

                int wordId = Convert.ToInt32(wordIdObj);

                var insertCmd = new SqlCommand("INSERT INTO VocabularyTopic (VocabularyId, TopicId) VALUES (@WordId, @TopicId)", conn);
                insertCmd.Parameters.AddWithValue("@WordId", wordId);
                insertCmd.Parameters.AddWithValue("@TopicId", topicId);

                try
                {
                    insertCmd.ExecuteNonQuery();
                    MessageBox.Show("üìö ƒê√£ th√™m v√†o ch·ªß ƒë·ªÅ th√†nh c√¥ng!");
                    this.Close();
                }
                catch (SqlException)
                {
                    MessageBox.Show("T·ª´ n√†y ƒë√£ c√≥ trong ch·ªß ƒë·ªÅ n√†y r·ªìi.");
                }
            }
        }

        private void btnCreateTopic_Click(object sender, EventArgs e)
        {
            string newTopic = txtNewTopic.Text.Trim();
            if (string.IsNullOrEmpty(newTopic))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p t√™n ch·ªß ƒë·ªÅ m·ªõi.");
                return;
            }

            using (var conn = DatabaseContext.GetConnection())
            {
                conn.Open();
                var checkCmd = new SqlCommand("SELECT COUNT(*) FROM Topics WHERE Name = @Name", conn);
                checkCmd.Parameters.AddWithValue("@Name", newTopic);
                int count = (int)checkCmd.ExecuteScalar();
                if (count > 0)
                {
                    MessageBox.Show("Ch·ªß ƒë·ªÅ n√†y ƒë√£ t·ªìn t·∫°i.");
                    return;
                }

                var insertCmd = new SqlCommand("INSERT INTO Topics (Name) VALUES (@Name)", conn);
                insertCmd.Parameters.AddWithValue("@Name", newTopic);
                insertCmd.ExecuteNonQuery();
            }

            LoadTopics();
            cboTopics.SelectedIndex = cboTopics.FindStringExact(newTopic);
            txtNewTopic.Clear();
            MessageBox.Show("‚úÖ ƒê√£ t·∫°o ch·ªß ƒë·ªÅ m·ªõi.");
        }
    }

    public class ComboBoxItem
    {
        public int Id { get; }
        public string Name { get; }

        public ComboBoxItem(int id, string name)
        {
            Id = id;
            Name = name;
        }

        public override string ToString() => Name;
    }
}



AddTopicForm.Designer.cs:
// AddToTopicForm.Designer.cs
namespace WordVaultAppMVC.Views
{
    partial class AddToTopicForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Label lblWord;
        private System.Windows.Forms.ComboBox cboTopics;
        private System.Windows.Forms.Button btnAdd;
        private System.Windows.Forms.Label lblNewTopic;
        private System.Windows.Forms.TextBox txtNewTopic;
        private System.Windows.Forms.Button btnCreateTopic;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.lblWord = new System.Windows.Forms.Label();
            this.cboTopics = new System.Windows.Forms.ComboBox();
            this.btnAdd = new System.Windows.Forms.Button();
            this.lblNewTopic = new System.Windows.Forms.Label();
            this.txtNewTopic = new System.Windows.Forms.TextBox();
            this.btnCreateTopic = new System.Windows.Forms.Button();
            this.SuspendLayout();

            // lblWord
            this.lblWord.AutoSize = true;
            this.lblWord.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.lblWord.Location = new System.Drawing.Point(20, 20);
            this.lblWord.Name = "lblWord";
            this.lblWord.Size = new System.Drawing.Size(100, 28);
            this.lblWord.TabIndex = 0;
            this.lblWord.Text = "T·ª´: (word)";

            // cboTopics
            this.cboTopics.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cboTopics.Font = new System.Drawing.Font("Segoe UI", 11F);
            this.cboTopics.Location = new System.Drawing.Point(20, 60);
            this.cboTopics.Name = "cboTopics";
            this.cboTopics.Size = new System.Drawing.Size(300, 33);
            this.cboTopics.TabIndex = 1;

            // btnAdd
            this.btnAdd.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.btnAdd.Location = new System.Drawing.Point(20, 110);
            this.btnAdd.Name = "btnAdd";
            this.btnAdd.Size = new System.Drawing.Size(150, 40);
            this.btnAdd.TabIndex = 2;
            this.btnAdd.Text = "Th√™m v√†o ch·ªß ƒë·ªÅ";
            this.btnAdd.UseVisualStyleBackColor = true;
            this.btnAdd.Click += new System.EventHandler(this.btnAdd_Click);

            // lblNewTopic
            this.lblNewTopic.AutoSize = true;
            this.lblNewTopic.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.lblNewTopic.Location = new System.Drawing.Point(20, 170);
            this.lblNewTopic.Name = "lblNewTopic";
            this.lblNewTopic.Size = new System.Drawing.Size(134, 23);
            this.lblNewTopic.TabIndex = 3;
            this.lblNewTopic.Text = "T·∫°o ch·ªß ƒë·ªÅ m·ªõi:";

            // txtNewTopic
            this.txtNewTopic.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.txtNewTopic.Location = new System.Drawing.Point(20, 200);
            this.txtNewTopic.Name = "txtNewTopic";
            this.txtNewTopic.Size = new System.Drawing.Size(200, 30);
            this.txtNewTopic.TabIndex = 4;

            // btnCreateTopic
            this.btnCreateTopic.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.btnCreateTopic.Location = new System.Drawing.Point(230, 198);
            this.btnCreateTopic.Name = "btnCreateTopic";
            this.btnCreateTopic.Size = new System.Drawing.Size(90, 32);
            this.btnCreateTopic.TabIndex = 5;
            this.btnCreateTopic.Text = "T·∫°o";
            this.btnCreateTopic.UseVisualStyleBackColor = true;
            this.btnCreateTopic.Click += new System.EventHandler(this.btnCreateTopic_Click);

            // AddToTopicForm
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(360, 260);
            this.Controls.Add(this.lblWord);
            this.Controls.Add(this.cboTopics);
            this.Controls.Add(this.btnAdd);
            this.Controls.Add(this.lblNewTopic);
            this.Controls.Add(this.txtNewTopic);
            this.Controls.Add(this.btnCreateTopic);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "AddToTopicForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Th√™m v√†o Ch·ªß ƒë·ªÅ";
            this.ResumeLayout(false);
            this.PerformLayout();
        }
    }
}


DailyReviewForm:
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using WordVaultAppMVC.Models; // Gi·∫£ s·ª≠ b·∫°n c√≥ model Vocabulary ho·∫∑c d·ªãch v·ª• t∆∞∆°ng ·ª©ng
using WordVaultAppMVC.Services;

namespace WordVaultAppMVC.Views
{
    public partial class DailyReviewForm : Form
    {
        private List<Vocabulary> dailyWords;
        private int currentIndex;
        private readonly VocabularyService vocabularyService;

        public DailyReviewForm()
        {
            InitializeComponent();
            vocabularyService = new VocabularyService();
            LoadDailyWords();
            currentIndex = 0;
            DisplayCurrentWord();
        }

        // Gi·∫£ s·ª≠ ph∆∞∆°ng th·ª©c n√†y l·∫•y danh s√°ch t·ª´ v·ª±ng c·∫ßn √¥n t·∫≠p h√†ng ng√†y (c√≥ th·ªÉ t·ª´ database ho·∫∑c d·ªãch v·ª•)
        private void LoadDailyWords()
        {
            // V√≠ d·ª•: S·ª≠ d·ª•ng VocabularyService ƒë·ªÉ l·∫•y danh s√°ch t·ª´ v·ª±ng. 
            // ·ªû ƒë√¢y, ta d√πng danh s√°ch t·∫°m th·ªùi ƒë·ªÉ demo.
            dailyWords = new List<Vocabulary>
            {
                new Vocabulary { Id = 1, Word = "Apple", Meaning = "A fruit", Pronunciation = "/Àà√¶p.…ôl/", AudioUrl = "http://example.com/apple.mp3" },
                new Vocabulary { Id = 2, Word = "Banana", Meaning = "A yellow fruit", Pronunciation = "/b…ôÀàn√¶n.…ô/", AudioUrl = "http://example.com/banana.mp3" },
                new Vocabulary { Id = 3, Word = "Orange", Meaning = "A citrus fruit", Pronunciation = "/Àà…ír.…™nd í/", AudioUrl = "http://example.com/orange.mp3" }
                // Th√™m c√°c t·ª´ kh√°c n·∫øu c·∫ßn
            };
        }

        // Hi·ªÉn th·ªã t·ª´ hi·ªán t·∫°i l√™n giao di·ªán
        private void DisplayCurrentWord()
        {
            if (dailyWords != null && dailyWords.Count > 0 && currentIndex < dailyWords.Count)
            {
                Vocabulary currentWord = dailyWords[currentIndex];
                lblCurrentWord.Text = "T·ª´ hi·ªán t·∫°i: " + currentWord.Word;
                lblMeaningDisplay.Text = "Nghƒ©a: " + currentWord.Meaning;
                lblRemainingWords.Text = "C√≤n l·∫°i: " + (dailyWords.Count - currentIndex - 1) + " t·ª´";
            }
            else
            {
                lblCurrentWord.Text = "Kh√¥ng c√≤n t·ª´ n√†o!";
                lblMeaningDisplay.Text = "";
                lblRemainingWords.Text = "";
            }
        }

        // S·ª± ki·ªán khi nh·∫•n n√∫t "T·ª´ k·∫ø ti·∫øp"
        private void btnNextWord_Click(object sender, EventArgs e)
        {
            currentIndex++;
            DisplayCurrentWord();
        }

        // S·ª± ki·ªán khi nh·∫•n n√∫t "Hi·ªÉn th·ªã nghƒ©a" (hi·ªÉn th·ªã qua MessageBox ho·∫∑c c·∫≠p nh·∫≠t lblMeaningDisplay)
        private void btnShowMeaning_Click(object sender, EventArgs e)
        {
            if (dailyWords != null && currentIndex < dailyWords.Count)
            {
                Vocabulary currentWord = dailyWords[currentIndex];
                MessageBox.Show($"Nghƒ©a c·ªßa t·ª´ '{currentWord.Word}': {currentWord.Meaning}", "Nghƒ©a t·ª´ v·ª±ng", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
    }
}

DailyReviewForm.Designer:
namespace WordVaultAppMVC.Views
{
    partial class DailyReviewForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        // Panels
        private System.Windows.Forms.Panel pnlHeader;
        private System.Windows.Forms.Panel pnlContent;
        private System.Windows.Forms.Panel pnlFooter;

        // Controls in Header
        private System.Windows.Forms.Label lblFormTitle;

        // Controls in Content
        private System.Windows.Forms.Label lblCurrentWord;
        private System.Windows.Forms.Button btnShowMeaning;
        private System.Windows.Forms.Button btnNextWord;
        private System.Windows.Forms.Label lblMeaningDisplay;
        private System.Windows.Forms.Label lblRemainingWords;

        // Controls in Footer (c√≥ th·ªÉ th√™m sau)
        // ...

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.pnlHeader = new System.Windows.Forms.Panel();
            this.lblFormTitle = new System.Windows.Forms.Label();
            this.pnlContent = new System.Windows.Forms.Panel();
            this.lblCurrentWord = new System.Windows.Forms.Label();
            this.btnShowMeaning = new System.Windows.Forms.Button();
            this.btnNextWord = new System.Windows.Forms.Button();
            this.lblMeaningDisplay = new System.Windows.Forms.Label();
            this.lblRemainingWords = new System.Windows.Forms.Label();
            this.pnlFooter = new System.Windows.Forms.Panel();
            this.pnlHeader.SuspendLayout();
            this.pnlContent.SuspendLayout();
            this.SuspendLayout();
            // 
            // pnlHeader
            // 
            this.pnlHeader.BackColor = System.Drawing.Color.FromArgb(52, 152, 219);
            this.pnlHeader.Controls.Add(this.lblFormTitle);
            this.pnlHeader.Dock = System.Windows.Forms.DockStyle.Top;
            this.pnlHeader.Location = new System.Drawing.Point(0, 0);
            this.pnlHeader.Name = "pnlHeader";
            this.pnlHeader.Size = new System.Drawing.Size(600, 60);
            this.pnlHeader.TabIndex = 0;
            // 
            // lblFormTitle
            // 
            this.lblFormTitle.AutoSize = true;
            this.lblFormTitle.Font = new System.Drawing.Font("Segoe UI", 16F, System.Drawing.FontStyle.Bold);
            this.lblFormTitle.ForeColor = System.Drawing.Color.White;
            this.lblFormTitle.Location = new System.Drawing.Point(20, 15);
            this.lblFormTitle.Name = "lblFormTitle";
            this.lblFormTitle.Size = new System.Drawing.Size(244, 45);
            this.lblFormTitle.TabIndex = 0;
            this.lblFormTitle.Text = "√în T·∫≠p H√†ng Ng√†y";
            // 
            // pnlContent
            // 
            this.pnlContent.Controls.Add(this.lblRemainingWords);
            this.pnlContent.Controls.Add(this.lblMeaningDisplay);
            this.pnlContent.Controls.Add(this.btnNextWord);
            this.pnlContent.Controls.Add(this.btnShowMeaning);
            this.pnlContent.Controls.Add(this.lblCurrentWord);
            this.pnlContent.Dock = System.Windows.Forms.DockStyle.Fill;
            this.pnlContent.Location = new System.Drawing.Point(0, 60);
            this.pnlContent.Name = "pnlContent";
            this.pnlContent.Padding = new System.Windows.Forms.Padding(20);
            this.pnlContent.Size = new System.Drawing.Size(600, 300);
            this.pnlContent.TabIndex = 1;
            // 
            // lblCurrentWord
            // 
            this.lblCurrentWord.Font = new System.Drawing.Font("Segoe UI", 16F, System.Drawing.FontStyle.Bold);
            this.lblCurrentWord.Location = new System.Drawing.Point(20, 20);
            this.lblCurrentWord.Name = "lblCurrentWord";
            this.lblCurrentWord.Size = new System.Drawing.Size(560, 50);
            this.lblCurrentWord.TabIndex = 0;
            this.lblCurrentWord.Text = "T·ª´ hi·ªán t·∫°i: ";
            this.lblCurrentWord.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // btnShowMeaning
            // 
            this.btnShowMeaning.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.btnShowMeaning.Location = new System.Drawing.Point(100, 90);
            this.btnShowMeaning.Name = "btnShowMeaning";
            this.btnShowMeaning.Size = new System.Drawing.Size(180, 45);
            this.btnShowMeaning.TabIndex = 1;
            this.btnShowMeaning.Text = "Hi·ªÉn th·ªã nghƒ©a";
            this.btnShowMeaning.UseVisualStyleBackColor = true;
            this.btnShowMeaning.Click += new System.EventHandler(this.btnShowMeaning_Click);
            // 
            // btnNextWord
            // 
            this.btnNextWord.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.btnNextWord.Location = new System.Drawing.Point(320, 90);
            this.btnNextWord.Name = "btnNextWord";
            this.btnNextWord.Size = new System.Drawing.Size(180, 45);
            this.btnNextWord.TabIndex = 2;
            this.btnNextWord.Text = "T·ª´ k·∫ø ti·∫øp";
            this.btnNextWord.UseVisualStyleBackColor = true;
            this.btnNextWord.Click += new System.EventHandler(this.btnNextWord_Click);
            // 
            // lblMeaningDisplay
            // 
            this.lblMeaningDisplay.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.lblMeaningDisplay.Location = new System.Drawing.Point(20, 150);
            this.lblMeaningDisplay.Name = "lblMeaningDisplay";
            this.lblMeaningDisplay.Size = new System.Drawing.Size(560, 50);
            this.lblMeaningDisplay.TabIndex = 3;
            this.lblMeaningDisplay.Text = "Nghƒ©a: ";
            this.lblMeaningDisplay.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // lblRemainingWords
            // 
            this.lblRemainingWords.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.lblRemainingWords.ForeColor = System.Drawing.Color.Gray;
            this.lblRemainingWords.Location = new System.Drawing.Point(20, 220);
            this.lblRemainingWords.Name = "lblRemainingWords";
            this.lblRemainingWords.Size = new System.Drawing.Size(560, 30);
            this.lblRemainingWords.TabIndex = 4;
            this.lblRemainingWords.Text = "C√≤n l·∫°i: 0 t·ª´";
            this.lblRemainingWords.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // pnlFooter
            // 
            this.pnlFooter.BackColor = System.Drawing.Color.FromArgb(236, 240, 241);
            this.pnlFooter.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.pnlFooter.Location = new System.Drawing.Point(0, 360);
            this.pnlFooter.Name = "pnlFooter";
            this.pnlFooter.Size = new System.Drawing.Size(600, 40);
            this.pnlFooter.TabIndex = 2;
            // 
            // DailyReviewForm
            // 
            this.ClientSize = new System.Drawing.Size(600, 400);
            this.Controls.Add(this.pnlContent);
            this.Controls.Add(this.pnlHeader);
            this.Controls.Add(this.pnlFooter);
            this.Name = "DailyReviewForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "√în T·∫≠p H√†ng Ng√†y";
            this.pnlHeader.ResumeLayout(false);
            this.pnlHeader.PerformLayout();
            this.pnlContent.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        #endregion
    }
}

MainForm:
using System;
using System.Windows.Forms;
using WordVaultAppMVC.Views.Controls;

namespace WordVaultAppMVC.Views
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
            LoadControl(new HomeControl()); // M·∫∑c ƒë·ªãnh l√† Home
        }

        private void LoadControl(UserControl control)
        {
            pnlMainContent.Controls.Clear();
            control.Dock = DockStyle.Fill;
            pnlMainContent.Controls.Add(control);
        }

        private void btnHome_Click(object sender, EventArgs e) => LoadControl(new HomeControl());
        private void btnTopicVocabulary_Click(object sender, EventArgs e) => LoadControl(new TopicVocabularyControl("T·ª´ v·ª±ng TOEIC"));
        private void btnFavorite_Click(object sender, EventArgs e) => LoadControl(new FavoriteWordsControl());
        private void btnDailyReview_Click(object sender, EventArgs e) => LoadControl(new DailyReviewControl());
        private void btnQuiz_Click(object sender, EventArgs e) => LoadControl(new QuizControl());
        private void btnShuffle_Click(object sender, EventArgs e) => LoadControl(new ShuffleStudyControl());
        private void btnSettings_Click(object sender, EventArgs e) => LoadControl(new SettingsControl());

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            DialogResult result = MessageBox.Show("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t?", "X√°c nh·∫≠n", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (result != DialogResult.Yes)
                e.Cancel = true;
        }
    }
}


MainForm.Designer:
namespace WordVaultAppMVC.Views
{
    partial class MainForm
    {
        private System.ComponentModel.IContainer components = null;

        private System.Windows.Forms.Panel pnlMainContent;
        // Panels
        private System.Windows.Forms.Panel pnlHeader;
        //private System.Windows.Forms.Panel pnlSearchArea;
        //private System.Windows.Forms.Panel pnlResultArea;
        private System.Windows.Forms.Panel pnlFooter;

        // Controls
        //private System.Windows.Forms.TextBox txtSearch;
        //private System.Windows.Forms.Button btnSearch;
        //private System.Windows.Forms.Label lblPronunciation;
        //private System.Windows.Forms.Label lblMeaning;
        //private System.Windows.Forms.Button btnPlayAudio;
        private System.Windows.Forms.Label lblAppTitle;

        // ToolStrip
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.ToolStripButton btnHome;
        private System.Windows.Forms.ToolStripButton btnTopicVocabulary;
        private System.Windows.Forms.ToolStripButton btnSettings;
        private System.Windows.Forms.ToolStripButton btnFavorite;
        private System.Windows.Forms.ToolStripButton btnDailyReview;
        private System.Windows.Forms.ToolStripButton btnQuiz;
        private System.Windows.Forms.ToolStripButton btnShuffle;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null)) components.Dispose();
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.pnlMainContent = new System.Windows.Forms.Panel();
            this.pnlHeader = new System.Windows.Forms.Panel();
            this.lblAppTitle = new System.Windows.Forms.Label();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.btnHome = new System.Windows.Forms.ToolStripButton();
            this.btnTopicVocabulary = new System.Windows.Forms.ToolStripButton();
            this.btnSettings = new System.Windows.Forms.ToolStripButton();
            this.btnFavorite = new System.Windows.Forms.ToolStripButton();
            this.btnDailyReview = new System.Windows.Forms.ToolStripButton();
            this.btnQuiz = new System.Windows.Forms.ToolStripButton();
            this.btnShuffle = new System.Windows.Forms.ToolStripButton();
            this.pnlFooter = new System.Windows.Forms.Panel();

            this.pnlHeader.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.SuspendLayout();

            // pnlMainContent
            this.pnlMainContent.Dock = System.Windows.Forms.DockStyle.Fill;
            this.pnlMainContent.Location = new System.Drawing.Point(0, 90);
            this.pnlMainContent.Name = "pnlMainContent";
            this.pnlMainContent.Padding = new System.Windows.Forms.Padding(10);
            this.pnlMainContent.Size = new System.Drawing.Size(800, 500);
            this.pnlMainContent.TabIndex = 5;

            // pnlHeader
            this.pnlHeader.BackColor = System.Drawing.Color.FromArgb(52, 152, 219);
            this.pnlHeader.Controls.Add(this.lblAppTitle);
            this.pnlHeader.Controls.Add(this.toolStrip);
            this.pnlHeader.Dock = System.Windows.Forms.DockStyle.Top;
            this.pnlHeader.Size = new System.Drawing.Size(800, 90);

            // lblAppTitle
            this.lblAppTitle.AutoSize = true;
            this.lblAppTitle.Font = new System.Drawing.Font("Segoe UI", 16F, System.Drawing.FontStyle.Bold);
            this.lblAppTitle.ForeColor = System.Drawing.Color.White;
            this.lblAppTitle.Location = new System.Drawing.Point(20, 50);
            this.lblAppTitle.Text = "üìò WordVault - T·ª´ ƒëi·ªÉn c√° nh√¢n";

            // toolStrip
            this.toolStrip.ImageScalingSize = new System.Drawing.Size(24, 24);
            this.toolStrip.Location = new System.Drawing.Point(0, 0);
            this.toolStrip.Size = new System.Drawing.Size(800, 38);
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
        this.btnHome,
        this.btnTopicVocabulary,
        this.btnSettings,
        this.btnFavorite,
        this.btnDailyReview,
        this.btnQuiz,
        this.btnShuffle
    });

            // ToolStrip Buttons
            this.btnHome.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.btnHome.Text = "Home";
            this.btnHome.Click += new System.EventHandler(this.btnHome_Click);

            this.btnTopicVocabulary.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.btnTopicVocabulary.Text = "Topic Vocabulary";
            this.btnTopicVocabulary.Click += new System.EventHandler(this.btnTopicVocabulary_Click);

            this.btnSettings.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.btnSettings.Text = "Settings";
            this.btnSettings.Click += new System.EventHandler(this.btnSettings_Click);

            this.btnFavorite.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.btnFavorite.Text = "‚≠ê Y√™u th√≠ch";
            this.btnFavorite.Click += new System.EventHandler(this.btnFavorite_Click);

            this.btnDailyReview.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.btnDailyReview.Text = "üìÖ H·ªçc t·ª´";
            this.btnDailyReview.Click += new System.EventHandler(this.btnDailyReview_Click);

            this.btnQuiz.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.btnQuiz.Text = "üß† Quiz";
            this.btnQuiz.Click += new System.EventHandler(this.btnQuiz_Click);

            this.btnShuffle.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.btnShuffle.Text = "üîÄ X√°o t·ª´";
            this.btnShuffle.Click += new System.EventHandler(this.btnShuffle_Click);

            // pnlFooter
            this.pnlFooter.BackColor = System.Drawing.Color.FromArgb(236, 240, 241);
            this.pnlFooter.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.pnlFooter.Size = new System.Drawing.Size(800, 30);

            // MainForm
            this.ClientSize = new System.Drawing.Size(800, 600);
            this.Controls.Add(this.pnlMainContent);
            this.Controls.Add(this.pnlHeader);
            this.Controls.Add(this.pnlFooter);
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "WordVault - English Vocabulary";
            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.MainForm_FormClosing);

            this.pnlHeader.ResumeLayout(false);
            this.pnlHeader.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.ResumeLayout(false);
        }
    }
}


QuizForm:
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using WordVaultAppMVC.Models;
using WordVaultAppMVC.Data;  // ƒê·∫£m b·∫£o ƒë√£ c√≥ using cho repository

namespace WordVaultAppMVC.Views
{
    public partial class QuizForm : Form
    {
        private List<Vocabulary> vocabularyList;  // Danh s√°ch t·ª´ v·ª±ng
        private int currentQuestionIndex = 0;     // Ch·ªâ s·ªë c√¢u h·ªèi hi·ªán t·∫°i
        private int score = 0;                    // ƒêi·ªÉm s·ªë c·ªßa ng∆∞·ªùi d√πng
        private VocabularyRepository vocabRepo;   // Instance c·ªßa repository

        public QuizForm()
        {
            InitializeComponent();
            vocabRepo = new VocabularyRepository();
            LoadVocabulary();
        }

        // L·∫•y danh s√°ch t·ª´ v·ª±ng t·ª´ c∆° s·ªü d·ªØ li·ªáu
        private void LoadVocabulary()
        {
            vocabularyList = vocabRepo.GetAllVocabulary();
            if (vocabularyList.Count > 0)
            {
                DisplayQuestion();
            }
        }

        // Hi·ªÉn th·ªã c√¢u h·ªèi ti·∫øp theo
        private void DisplayQuestion()
        {
            if (currentQuestionIndex >= vocabularyList.Count)
            {
                MessageBox.Show($"B√†i ki·ªÉm tra ho√†n th√†nh! B·∫°n ƒë√£ ƒë·∫°t {score} ƒëi·ªÉm.");
                this.Close();
                return;
            }

            var question = vocabularyList[currentQuestionIndex];
            lblWord.Text = question.Word;  // Hi·ªÉn th·ªã t·ª´ v·ª±ng

            // T·∫°o c√°c ƒë√°p √°n ng·∫´u nhi√™n (1 ƒë√∫ng, 3 sai)
            var correctAnswer = question.Meaning;
            var wrongAnswers = GetWrongAnswers(correctAnswer);

            var answers = new List<string> { correctAnswer };
            answers.AddRange(wrongAnswers);
            ShuffleList(answers); // X√°o tr·ªôn danh s√°ch ƒë√°p √°n

            btnAnswer1.Text = answers[0];
            btnAnswer2.Text = answers[1];
            btnAnswer3.Text = answers[2];
            btnAnswer4.Text = answers[3];

            currentQuestionIndex++;
        }

        // Ph∆∞∆°ng th·ª©c x√°o tr·ªôn danh s√°ch
        private void ShuffleList<T>(IList<T> list)
        {
            Random rng = new Random();
            int n = list.Count;
            while (n > 1)
            {
                n--;
                int k = rng.Next(n + 1);
                T value = list[k];
                list[k] = list[n];
                list[n] = value;
            }
        }

        // L·∫•y c√°c ƒë√°p √°n sai t·ª´ danh s√°ch t·ª´ v·ª±ng
        private List<string> GetWrongAnswers(string correctAnswer)
        {
            var wrongAnswers = new List<string>();
            foreach (var vocab in vocabularyList)
            {
                if (vocab.Meaning != correctAnswer)
                {
                    wrongAnswers.Add(vocab.Meaning);
                }
                if (wrongAnswers.Count >= 3) break;
            }
            return wrongAnswers;
        }

        // Ki·ªÉm tra ƒë√°p √°n
        private void CheckAnswer(string selectedAnswer)
        {
            var correctAnswer = vocabularyList[currentQuestionIndex - 1].Meaning;
            if (selectedAnswer == correctAnswer)
            {
                score++;
                MessageBox.Show("ƒê√∫ng r·ªìi!");
            }
            else
            {
                MessageBox.Show("Sai r·ªìi!");
            }

            DisplayQuestion();
        }

        // Khi ng∆∞·ªùi d√πng ch·ªçn c√¢u tr·∫£ l·ªùi
        private void btnAnswer1_Click(object sender, EventArgs e)
        {
            CheckAnswer(btnAnswer1.Text);
        }

        private void btnAnswer2_Click(object sender, EventArgs e)
        {
            CheckAnswer(btnAnswer2.Text);
        }

        private void btnAnswer3_Click(object sender, EventArgs e)
        {
            CheckAnswer(btnAnswer3.Text);
        }

        private void btnAnswer4_Click(object sender, EventArgs e)
        {
            CheckAnswer(btnAnswer4.Text);
        }
    }
}

QuizForm.Designer:
namespace WordVaultAppMVC.Views
{
    partial class QuizForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Panel pnlHeader;
        private System.Windows.Forms.Panel pnlMain;
        private System.Windows.Forms.Label lblWord;
        private System.Windows.Forms.Button btnAnswer1;
        private System.Windows.Forms.Button btnAnswer2;
        private System.Windows.Forms.Button btnAnswer3;
        private System.Windows.Forms.Button btnAnswer4;
        private System.Windows.Forms.Label lblScore;
        private System.Windows.Forms.Panel pnlFooter;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.pnlHeader = new System.Windows.Forms.Panel();
            this.lblScore = new System.Windows.Forms.Label();
            this.pnlMain = new System.Windows.Forms.Panel();
            this.lblWord = new System.Windows.Forms.Label();
            this.btnAnswer1 = new System.Windows.Forms.Button();
            this.btnAnswer2 = new System.Windows.Forms.Button();
            this.btnAnswer3 = new System.Windows.Forms.Button();
            this.btnAnswer4 = new System.Windows.Forms.Button();
            this.pnlFooter = new System.Windows.Forms.Panel();
            this.pnlHeader.SuspendLayout();
            this.pnlMain.SuspendLayout();
            this.SuspendLayout();
            // 
            // pnlHeader
            // 
            this.pnlHeader.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
            this.pnlHeader.Controls.Add(this.lblScore);
            this.pnlHeader.Dock = System.Windows.Forms.DockStyle.Top;
            this.pnlHeader.Location = new System.Drawing.Point(0, 0);
            this.pnlHeader.Name = "pnlHeader";
            this.pnlHeader.Size = new System.Drawing.Size(480, 50);
            this.pnlHeader.TabIndex = 0;
            // 
            // lblScore
            // 
            this.lblScore.AutoSize = true;
            this.lblScore.Font = new System.Drawing.Font("Segoe UI", 14F, System.Drawing.FontStyle.Bold);
            this.lblScore.ForeColor = System.Drawing.Color.White;
            this.lblScore.Location = new System.Drawing.Point(10, 10);
            this.lblScore.Name = "lblScore";
            this.lblScore.Size = new System.Drawing.Size(119, 38);
            this.lblScore.TabIndex = 0;
            this.lblScore.Text = "ƒêi·ªÉm: 0";
            // 
            // pnlMain
            // 
            this.pnlMain.Controls.Add(this.lblWord);
            this.pnlMain.Controls.Add(this.btnAnswer1);
            this.pnlMain.Controls.Add(this.btnAnswer2);
            this.pnlMain.Controls.Add(this.btnAnswer3);
            this.pnlMain.Controls.Add(this.btnAnswer4);
            this.pnlMain.Dock = System.Windows.Forms.DockStyle.Fill;
            this.pnlMain.Location = new System.Drawing.Point(0, 50);
            this.pnlMain.Name = "pnlMain";
            this.pnlMain.Size = new System.Drawing.Size(480, 347);
            this.pnlMain.TabIndex = 1;
            // 
            // lblWord
            // 
            this.lblWord.Font = new System.Drawing.Font("Segoe UI", 16F, System.Drawing.FontStyle.Bold);
            this.lblWord.ForeColor = System.Drawing.Color.Black;
            this.lblWord.Location = new System.Drawing.Point(40, 30);
            this.lblWord.Name = "lblWord";
            this.lblWord.Size = new System.Drawing.Size(400, 40);
            this.lblWord.TabIndex = 0;
            this.lblWord.Text = "T·ª´ v·ª±ng s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y";
            this.lblWord.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // btnAnswer1
            // 
            this.btnAnswer1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(123)))), ((int)(((byte)(255)))));
            this.btnAnswer1.FlatAppearance.BorderSize = 0;
            this.btnAnswer1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnAnswer1.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.btnAnswer1.ForeColor = System.Drawing.Color.White;
            this.btnAnswer1.Location = new System.Drawing.Point(40, 100);
            this.btnAnswer1.Name = "btnAnswer1";
            this.btnAnswer1.Size = new System.Drawing.Size(400, 40);
            this.btnAnswer1.TabIndex = 1;
            this.btnAnswer1.Text = "ƒê√°p √°n 1";
            this.btnAnswer1.UseVisualStyleBackColor = false;
            this.btnAnswer1.Click += new System.EventHandler(this.btnAnswer1_Click);
            // 
            // btnAnswer2
            // 
            this.btnAnswer2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(123)))), ((int)(((byte)(255)))));
            this.btnAnswer2.FlatAppearance.BorderSize = 0;
            this.btnAnswer2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnAnswer2.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.btnAnswer2.ForeColor = System.Drawing.Color.White;
            this.btnAnswer2.Location = new System.Drawing.Point(40, 160);
            this.btnAnswer2.Name = "btnAnswer2";
            this.btnAnswer2.Size = new System.Drawing.Size(400, 40);
            this.btnAnswer2.TabIndex = 2;
            this.btnAnswer2.Text = "ƒê√°p √°n 2";
            this.btnAnswer2.UseVisualStyleBackColor = false;
            this.btnAnswer2.Click += new System.EventHandler(this.btnAnswer2_Click);
            // 
            // btnAnswer3
            // 
            this.btnAnswer3.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(123)))), ((int)(((byte)(255)))));
            this.btnAnswer3.FlatAppearance.BorderSize = 0;
            this.btnAnswer3.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnAnswer3.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.btnAnswer3.ForeColor = System.Drawing.Color.White;
            this.btnAnswer3.Location = new System.Drawing.Point(40, 220);
            this.btnAnswer3.Name = "btnAnswer3";
            this.btnAnswer3.Size = new System.Drawing.Size(400, 40);
            this.btnAnswer3.TabIndex = 3;
            this.btnAnswer3.Text = "ƒê√°p √°n 3";
            this.btnAnswer3.UseVisualStyleBackColor = false;
            this.btnAnswer3.Click += new System.EventHandler(this.btnAnswer3_Click);
            // 
            // btnAnswer4
            // 
            this.btnAnswer4.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(123)))), ((int)(((byte)(255)))));
            this.btnAnswer4.FlatAppearance.BorderSize = 0;
            this.btnAnswer4.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnAnswer4.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.btnAnswer4.ForeColor = System.Drawing.Color.White;
            this.btnAnswer4.Location = new System.Drawing.Point(40, 280);
            this.btnAnswer4.Name = "btnAnswer4";
            this.btnAnswer4.Size = new System.Drawing.Size(400, 40);
            this.btnAnswer4.TabIndex = 4;
            this.btnAnswer4.Text = "ƒê√°p √°n 4";
            this.btnAnswer4.UseVisualStyleBackColor = false;
            this.btnAnswer4.Click += new System.EventHandler(this.btnAnswer4_Click);
            // 
            // pnlFooter
            // 
            this.pnlFooter.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
            this.pnlFooter.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.pnlFooter.Location = new System.Drawing.Point(0, 397);
            this.pnlFooter.Name = "pnlFooter";
            this.pnlFooter.Size = new System.Drawing.Size(480, 50);
            this.pnlFooter.TabIndex = 2;
            // 
            // QuizForm
            // 
            this.ClientSize = new System.Drawing.Size(480, 447);
            this.Controls.Add(this.pnlMain);
            this.Controls.Add(this.pnlHeader);
            this.Controls.Add(this.pnlFooter);
            this.Name = "QuizForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "B√†i Ki·ªÉm Tra T·ª´ V·ª±ng";
            this.pnlHeader.ResumeLayout(false);
            this.pnlHeader.PerformLayout();
            this.pnlMain.ResumeLayout(false);
            this.ResumeLayout(false);

        }
    }
}

ShuffleStudyForm:
using System;
using System.Windows.Forms;
using WordVaultAppMVC.Services;

namespace WordVaultAppMVC.Views
{
    public partial class ShuffleStudyForm : Form
    {
        private string currentWord;
        private string currentWordId; // ƒê·ªÉ l∆∞u tr·ªØ t·ª´ v·ª±ng hi·ªán t·∫°i
        private int remainingWordsCount;
        private readonly VocabularyService vocabularyService; // D·ªãch v·ª• API

        public ShuffleStudyForm()
        {
            InitializeComponent();
            vocabularyService = new VocabularyService(); // Kh·ªüi t·∫°o API service
            remainingWordsCount = 10; // S·ªë t·ª´ ban ƒë·∫ßu ƒë·ªÉ h·ªçc
            LoadNextWord();
        }

        // T·∫£i t·ª´ v·ª±ng ti·∫øp theo t·ª´ c∆° s·ªü d·ªØ li·ªáu ho·∫∑c API
        private void LoadNextWord()
        {
            if (remainingWordsCount > 0)
            {
                // Gi·∫£ s·ª≠ b·∫°n ƒëang l·∫•y t·ª´ v·ª±ng ng·∫´u nhi√™n t·ª´ API ho·∫∑c c∆° s·ªü d·ªØ li·ªáu
                currentWord = vocabularyService.GetRandomWord(out currentWordId);
                lblWord.Text = "T·ª´ hi·ªán t·∫°i: " + currentWord;
                lblRemainingWords.Text = "C√≤n l·∫°i: " + remainingWordsCount + " t·ª´";
            }
            else
            {
                lblWord.Text = "Kh√¥ng c√≤n t·ª´ n√†o!";
                lblRemainingWords.Text = "";
            }
        }

        // S·ª± ki·ªán khi nh·∫•n n√∫t "Ti·∫øp theo"
        private void btnNextWord_Click(object sender, EventArgs e)
        {
            remainingWordsCount--;
            LoadNextWord();
        }

        // S·ª± ki·ªán khi nh·∫•n n√∫t "Hi·ªÉn th·ªã nghƒ©a"
        private void btnShowMeaning_Click(object sender, EventArgs e)
        {
            string meaning = vocabularyService.GetWordMeaning(currentWordId);
            MessageBox.Show($"Nghƒ©a c·ªßa t·ª´ '{currentWord}': {meaning}", "Nghƒ©a t·ª´ v·ª±ng", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        // S·ª± ki·ªán khi nh·∫•n n√∫t "Ki·ªÉm tra nghƒ©a"
        private void btnCheckMeaning_Click(object sender, EventArgs e)
        {
            string userMeaning = Microsoft.VisualBasic.Interaction.InputBox("Nh·∫≠p nghƒ©a c·ªßa t·ª´ v·ª±ng n√†y:", "Ki·ªÉm tra Nghƒ©a", "");

            if (string.IsNullOrEmpty(userMeaning))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p nghƒ©a!", "C·∫£nh b√°o", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string correctMeaning = vocabularyService.GetWordMeaning(currentWordId);
            if (userMeaning.Trim().Equals(correctMeaning, StringComparison.OrdinalIgnoreCase))
            {
                MessageBox.Show("Ch√≠nh x√°c! Nghƒ©a ƒë√∫ng.", "K·∫øt qu·∫£", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show($"Sai r·ªìi! Nghƒ©a ƒë√∫ng l√†: {correctMeaning}", "K·∫øt qu·∫£", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}

ShuffleStudyForm.Designer.cs:
namespace WordVaultAppMVC.Views
{
    partial class ShuffleStudyForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Panel pnlHeader;
        private System.Windows.Forms.Label lblAppTitle;
        private System.Windows.Forms.Panel pnlMain;
        private System.Windows.Forms.Label lblWord;
        private System.Windows.Forms.Button btnNextWord;
        private System.Windows.Forms.Button btnShowMeaning;
        private System.Windows.Forms.Button btnCheckMeaning;
        private System.Windows.Forms.Label lblRemainingWords;
        private System.Windows.Forms.Panel pnlFooter;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.pnlHeader = new System.Windows.Forms.Panel();
            this.lblAppTitle = new System.Windows.Forms.Label();
            this.pnlMain = new System.Windows.Forms.Panel();
            this.lblWord = new System.Windows.Forms.Label();
            this.lblRemainingWords = new System.Windows.Forms.Label();
            this.btnNextWord = new System.Windows.Forms.Button();
            this.btnShowMeaning = new System.Windows.Forms.Button();
            this.btnCheckMeaning = new System.Windows.Forms.Button();
            this.pnlFooter = new System.Windows.Forms.Panel();
            this.pnlHeader.SuspendLayout();
            this.pnlMain.SuspendLayout();
            this.SuspendLayout();
            // 
            // pnlHeader
            // 
            this.pnlHeader.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(52)))), ((int)(((byte)(152)))), ((int)(((byte)(219)))));
            this.pnlHeader.Controls.Add(this.lblAppTitle);
            this.pnlHeader.Dock = System.Windows.Forms.DockStyle.Top;
            this.pnlHeader.Location = new System.Drawing.Point(0, 0);
            this.pnlHeader.Name = "pnlHeader";
            this.pnlHeader.Size = new System.Drawing.Size(540, 60);
            this.pnlHeader.TabIndex = 1;
            // 
            // lblAppTitle
            // 
            this.lblAppTitle.AutoSize = true;
            this.lblAppTitle.Font = new System.Drawing.Font("Segoe UI", 16F, System.Drawing.FontStyle.Bold);
            this.lblAppTitle.ForeColor = System.Drawing.Color.White;
            this.lblAppTitle.Location = new System.Drawing.Point(20, 15);
            this.lblAppTitle.Name = "lblAppTitle";
            this.lblAppTitle.Size = new System.Drawing.Size(407, 45);
            this.lblAppTitle.TabIndex = 0;
            this.lblAppTitle.Text = "H·ªçc Ng·∫´u Nhi√™n T·ª´ V·ª±ng";
            // 
            // pnlMain
            // 
            this.pnlMain.Controls.Add(this.lblWord);
            this.pnlMain.Controls.Add(this.lblRemainingWords);
            this.pnlMain.Controls.Add(this.btnNextWord);
            this.pnlMain.Controls.Add(this.btnShowMeaning);
            this.pnlMain.Controls.Add(this.btnCheckMeaning);
            this.pnlMain.Dock = System.Windows.Forms.DockStyle.Fill;
            this.pnlMain.Location = new System.Drawing.Point(0, 60);
            this.pnlMain.Name = "pnlMain";
            this.pnlMain.Padding = new System.Windows.Forms.Padding(20);
            this.pnlMain.Size = new System.Drawing.Size(540, 245);
            this.pnlMain.TabIndex = 0;
            // 
            // lblWord
            // 
            this.lblWord.Font = new System.Drawing.Font("Segoe UI", 14F);
            this.lblWord.ForeColor = System.Drawing.Color.Black;
            this.lblWord.Location = new System.Drawing.Point(0, 10);
            this.lblWord.Name = "lblWord";
            this.lblWord.Size = new System.Drawing.Size(480, 40);
            this.lblWord.TabIndex = 0;
            this.lblWord.Text = "T·ª´ hi·ªán t·∫°i: ";
            this.lblWord.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // lblRemainingWords
            // 
            this.lblRemainingWords.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.lblRemainingWords.ForeColor = System.Drawing.Color.Gray;
            this.lblRemainingWords.Location = new System.Drawing.Point(0, 200);
            this.lblRemainingWords.Name = "lblRemainingWords";
            this.lblRemainingWords.Size = new System.Drawing.Size(528, 42);
            this.lblRemainingWords.TabIndex = 4;
            this.lblRemainingWords.Text = "C√≤n l·∫°i: 9 t·ª´";
            this.lblRemainingWords.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // btnNextWord
            // 
            this.btnNextWord.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.btnNextWord.Location = new System.Drawing.Point(340, 119);
            this.btnNextWord.Name = "btnNextWord";
            this.btnNextWord.Size = new System.Drawing.Size(120, 40);
            this.btnNextWord.TabIndex = 1;
            this.btnNextWord.Text = "Ti·∫øp theo";
            this.btnNextWord.Click += new System.EventHandler(this.btnNextWord_Click);
            // 
            // btnShowMeaning
            // 
            this.btnShowMeaning.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.btnShowMeaning.Location = new System.Drawing.Point(200, 119);
            this.btnShowMeaning.Name = "btnShowMeaning";
            this.btnShowMeaning.Size = new System.Drawing.Size(120, 40);
            this.btnShowMeaning.TabIndex = 2;
            this.btnShowMeaning.Text = "Hi·ªÉn th·ªã nghƒ©a";
            this.btnShowMeaning.Click += new System.EventHandler(this.btnShowMeaning_Click);
            // 
            // btnCheckMeaning
            // 
            this.btnCheckMeaning.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.btnCheckMeaning.Location = new System.Drawing.Point(60, 119);
            this.btnCheckMeaning.Name = "btnCheckMeaning";
            this.btnCheckMeaning.Size = new System.Drawing.Size(120, 40);
            this.btnCheckMeaning.TabIndex = 3;
            this.btnCheckMeaning.Text = "Ki·ªÉm tra nghƒ©a";
            this.btnCheckMeaning.Click += new System.EventHandler(this.btnCheckMeaning_Click);
            // 
            // pnlFooter
            // 
            this.pnlFooter.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(236)))), ((int)(((byte)(240)))), ((int)(((byte)(241)))));
            this.pnlFooter.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.pnlFooter.Location = new System.Drawing.Point(0, 305);
            this.pnlFooter.Name = "pnlFooter";
            this.pnlFooter.Size = new System.Drawing.Size(540, 30);
            this.pnlFooter.TabIndex = 2;
            // 
            // ShuffleStudyForm
            // 
            this.ClientSize = new System.Drawing.Size(540, 335);
            this.Controls.Add(this.pnlMain);
            this.Controls.Add(this.pnlHeader);
            this.Controls.Add(this.pnlFooter);
            this.Name = "ShuffleStudyForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "H·ªçc Ng·∫´u Nhi√™n T·ª´ V·ª±ng";
            this.pnlHeader.ResumeLayout(false);
            this.pnlHeader.PerformLayout();
            this.pnlMain.ResumeLayout(false);
            this.ResumeLayout(false);

        }
    }
}

TopicVocabularyForm:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using WordVaultAppMVC.Controllers;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Views
{
    public partial class TopicVocabularyForm : Form
    {
        private readonly TopicController topicController;
        private readonly VocabularyController vocabularyController;
        private string currentTopic; // T√™n ch·ªß ƒë·ªÅ hi·ªán t·∫°i
        private List<Vocabulary> vocabularyList;
        public TopicVocabularyForm(string topicName)
        {
            InitializeComponent();
            currentTopic = topicName;
            lblTopicTitle.Text = "Ch·ªß ƒë·ªÅ: " + currentTopic;
            topicController = new TopicController();
            vocabularyController = new VocabularyController();
            LoadVocabulary();
        }

        // T·∫£i danh s√°ch t·ª´ v·ª±ng thu·ªôc ch·ªß ƒë·ªÅ hi·ªán t·∫°i (gi·∫£ s·ª≠ l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu)
        private void LoadVocabulary()
        {
            // Gi·∫£ s·ª≠ VocabularyController c√≥ ph∆∞∆°ng th·ª©c l·∫•y t·ª´ v·ª±ng theo ch·ªß ƒë·ªÅ
            vocabularyList = vocabularyController.GetVocabularyByTopic(currentTopic);
            lstVocabulary.Items.Clear();
            if (vocabularyList != null)
            {
                foreach (var vocab in vocabularyList)
                {
                    lstVocabulary.Items.Add(vocab.Word + " - " + vocab.Meaning);
                }
                lblTotalVocabulary.Text = "T·ªïng s·ªë t·ª´: " + vocabularyList.Count;
            }
            else
            {
                lblTotalVocabulary.Text = "T·ªïng s·ªë t·ª´: 0";
            }
        }

        // S·ª± ki·ªán khi nh·∫•n n√∫t "Th√™m t·ª´"
        private void btnAddVocabulary_Click(object sender, EventArgs e)
        {
            string newVocab = txtNewVocabulary.Text.Trim();
            if (string.IsNullOrEmpty(newVocab))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p t·ª´ v·ª±ng c·∫ßn th√™m.", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Gi·∫£ s·ª≠ th√™m t·ª´ v·ª±ng m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu v√† c·∫≠p nh·∫≠t danh s√°ch
            // B·∫°n c√≥ th·ªÉ m·ªü r·ªông ƒë·ªÉ nh·∫≠p c·∫£ nghƒ©a, ph√°t √¢m, URL audio, ...
            Vocabulary vocab = new Vocabulary
            {
                Word = newVocab,
                Meaning = "Ch∆∞a c√≥ nghƒ©a", // T·∫°m th·ªùi
                Pronunciation = "",
                AudioUrl = ""
            };

            vocabularyController.AddVocabulary(vocab.Word, vocab.Meaning, vocab.Pronunciation, vocab.AudioUrl);
            MessageBox.Show("Th√™m t·ª´ v·ª±ng th√†nh c√¥ng!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Information);
            txtNewVocabulary.Clear();
            LoadVocabulary();
        }

        // S·ª± ki·ªán khi nh·∫•n n√∫t "Xo√° t·ª´ ƒë√£ ch·ªçn"
        private void btnRemoveVocabulary_Click(object sender, EventArgs e)
        {
            int selectedIndex = lstVocabulary.SelectedIndex;
            if (selectedIndex < 0)
            {
                MessageBox.Show("Vui l√≤ng ch·ªçn t·ª´ v·ª±ng c·∫ßn xo√°.", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // L·∫•y ƒë·ªëi t∆∞·ª£ng Vocabulary d·ª±a tr√™n ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªçn
            var vocab = vocabularyList[selectedIndex];
            var confirm = MessageBox.Show($"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·ª´ \"{vocab.Word}\"?", "X√°c nh·∫≠n x√≥a", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (confirm == DialogResult.Yes)
            {
                vocabularyController.RemoveVocabulary(vocab.Id);
                MessageBox.Show("X√≥a t·ª´ v·ª±ng th√†nh c√¥ng!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Information);
                LoadVocabulary();
            }
        }

        private void TopicVocabularyForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            //// X·ª≠ l√Ω khi form ƒë√≥ng
            //var result = MessageBox.Show("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t kh√¥ng?", "X√°c nh·∫≠n", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            //if (result == DialogResult.No)
            //{
            //    e.Cancel = true; // H·ªßy thao t√°c ƒë√≥ng form
            //}
            //else
            //{
            //    Application.Exit(); // Tho√°t ch∆∞∆°ng tr√¨nh
            //}
        }
    }
}


TopicVocabularyForm.Designer.cs:
namespace WordVaultAppMVC.Views
{
    partial class TopicVocabularyForm
    {
        private System.ComponentModel.IContainer components = null;

        // Panels
        private System.Windows.Forms.Panel pnlHeader;
        private System.Windows.Forms.Panel pnlContent;
        private System.Windows.Forms.Panel pnlFooter;

        // Controls in Header
        private System.Windows.Forms.Label lblTopicTitle;

        // Controls in Content
        private System.Windows.Forms.ListBox lstVocabulary;
        private System.Windows.Forms.TextBox txtNewVocabulary;
        private System.Windows.Forms.Button btnAddVocabulary;
        private System.Windows.Forms.Button btnRemoveVocabulary;

        // Controls in Footer
        private System.Windows.Forms.Label lblTotalVocabulary;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.pnlHeader = new System.Windows.Forms.Panel();
            this.lblTopicTitle = new System.Windows.Forms.Label();
            this.pnlContent = new System.Windows.Forms.Panel();
            this.lstVocabulary = new System.Windows.Forms.ListBox();
            this.txtNewVocabulary = new System.Windows.Forms.TextBox();
            this.btnAddVocabulary = new System.Windows.Forms.Button();
            this.btnRemoveVocabulary = new System.Windows.Forms.Button();
            this.pnlFooter = new System.Windows.Forms.Panel();
            this.lblTotalVocabulary = new System.Windows.Forms.Label();
            this.pnlHeader.SuspendLayout();
            this.pnlContent.SuspendLayout();
            this.pnlFooter.SuspendLayout();
            this.SuspendLayout();
            // 
            // pnlHeader
            // 
            this.pnlHeader.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(52)))), ((int)(((byte)(152)))), ((int)(((byte)(219)))));
            this.pnlHeader.Controls.Add(this.lblTopicTitle);
            this.pnlHeader.Dock = System.Windows.Forms.DockStyle.Top;
            this.pnlHeader.Location = new System.Drawing.Point(0, 0);
            this.pnlHeader.Name = "pnlHeader";
            this.pnlHeader.Size = new System.Drawing.Size(601, 60);
            this.pnlHeader.TabIndex = 0;
            // 
            // lblTopicTitle
            // 
            this.lblTopicTitle.AutoSize = true;
            this.lblTopicTitle.Font = new System.Drawing.Font("Segoe UI", 16F, System.Drawing.FontStyle.Bold);
            this.lblTopicTitle.ForeColor = System.Drawing.Color.White;
            this.lblTopicTitle.Location = new System.Drawing.Point(20, 15);
            this.lblTopicTitle.Name = "lblTopicTitle";
            this.lblTopicTitle.Size = new System.Drawing.Size(326, 45);
            this.lblTopicTitle.TabIndex = 0;
            this.lblTopicTitle.Text = "Ch·ªß ƒë·ªÅ: [T√™n ch·ªß ƒë·ªÅ]";
            // 
            // pnlContent
            // 
            this.pnlContent.Controls.Add(this.lstVocabulary);
            this.pnlContent.Controls.Add(this.txtNewVocabulary);
            this.pnlContent.Controls.Add(this.btnAddVocabulary);
            this.pnlContent.Controls.Add(this.btnRemoveVocabulary);
            this.pnlContent.Dock = System.Windows.Forms.DockStyle.Fill;
            this.pnlContent.Location = new System.Drawing.Point(0, 60);
            this.pnlContent.Name = "pnlContent";
            this.pnlContent.Padding = new System.Windows.Forms.Padding(20);
            this.pnlContent.Size = new System.Drawing.Size(601, 310);
            this.pnlContent.TabIndex = 1;
            // 
            // lstVocabulary
            // 
            this.lstVocabulary.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.lstVocabulary.FormattingEnabled = true;
            this.lstVocabulary.ItemHeight = 32;
            this.lstVocabulary.Location = new System.Drawing.Point(20, 20);
            this.lstVocabulary.Name = "lstVocabulary";
            this.lstVocabulary.Size = new System.Drawing.Size(560, 132);
            this.lstVocabulary.TabIndex = 0;
            // 
            // txtNewVocabulary
            // 
            this.txtNewVocabulary.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.txtNewVocabulary.Location = new System.Drawing.Point(20, 190);
            this.txtNewVocabulary.Name = "txtNewVocabulary";
            this.txtNewVocabulary.Size = new System.Drawing.Size(360, 39);
            this.txtNewVocabulary.TabIndex = 1;
            // 
            // btnAddVocabulary
            // 
            this.btnAddVocabulary.BackColor = System.Drawing.Color.DodgerBlue;
            this.btnAddVocabulary.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnAddVocabulary.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Bold);
            this.btnAddVocabulary.ForeColor = System.Drawing.Color.White;
            this.btnAddVocabulary.Location = new System.Drawing.Point(400, 190);
            this.btnAddVocabulary.Name = "btnAddVocabulary";
            this.btnAddVocabulary.Size = new System.Drawing.Size(180, 39);
            this.btnAddVocabulary.TabIndex = 2;
            this.btnAddVocabulary.Text = "Th√™m t·ª´";
            this.btnAddVocabulary.UseVisualStyleBackColor = false;
            this.btnAddVocabulary.Click += new System.EventHandler(this.btnAddVocabulary_Click);
            // 
            // btnRemoveVocabulary
            // 
            this.btnRemoveVocabulary.BackColor = System.Drawing.Color.Firebrick;
            this.btnRemoveVocabulary.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnRemoveVocabulary.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Bold);
            this.btnRemoveVocabulary.ForeColor = System.Drawing.Color.White;
            this.btnRemoveVocabulary.Location = new System.Drawing.Point(20, 240);
            this.btnRemoveVocabulary.Name = "btnRemoveVocabulary";
            this.btnRemoveVocabulary.Size = new System.Drawing.Size(204, 47);
            this.btnRemoveVocabulary.TabIndex = 3;
            this.btnRemoveVocabulary.Text = "Xo√° t·ª´ ƒë√£ ch·ªçn";
            this.btnRemoveVocabulary.UseVisualStyleBackColor = false;
            this.btnRemoveVocabulary.Click += new System.EventHandler(this.btnRemoveVocabulary_Click);
            // 
            // pnlFooter
            // 
            this.pnlFooter.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(236)))), ((int)(((byte)(240)))), ((int)(((byte)(241)))));
            this.pnlFooter.Controls.Add(this.lblTotalVocabulary);
            this.pnlFooter.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.pnlFooter.Location = new System.Drawing.Point(0, 370);
            this.pnlFooter.Name = "pnlFooter";
            this.pnlFooter.Size = new System.Drawing.Size(601, 40);
            this.pnlFooter.TabIndex = 2;
            // 
            // lblTotalVocabulary
            // 
            this.lblTotalVocabulary.AutoSize = true;
            this.lblTotalVocabulary.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.lblTotalVocabulary.ForeColor = System.Drawing.Color.Gray;
            this.lblTotalVocabulary.Location = new System.Drawing.Point(20, 10);
            this.lblTotalVocabulary.Name = "lblTotalVocabulary";
            this.lblTotalVocabulary.Size = new System.Drawing.Size(171, 28);
            this.lblTotalVocabulary.TabIndex = 0;
            this.lblTotalVocabulary.Text = "T·ªïng s·ªë t·ª´: [s·ªë t·ª´]";
            // 
            // TopicVocabularyForm
            // 
            this.ClientSize = new System.Drawing.Size(601, 410);
            this.Controls.Add(this.pnlContent);
            this.Controls.Add(this.pnlHeader);
            this.Controls.Add(this.pnlFooter);
            this.Name = "TopicVocabularyForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Qu·∫£n l√Ω T·ª´ V·ª±ng theo Ch·ªß ƒê·ªÅ";
            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.TopicVocabularyForm_FormClosing);
            this.pnlHeader.ResumeLayout(false);
            this.pnlHeader.PerformLayout();
            this.pnlContent.ResumeLayout(false);
            this.pnlContent.PerformLayout();
            this.pnlFooter.ResumeLayout(false);
            this.pnlFooter.PerformLayout();
            this.ResumeLayout(false);

        }

        #endregion
    }
}

VocabularyDetailPanel:
using System;
using System.Windows.Forms;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Views
{
    public partial class VocabularyDetailPanel : UserControl
    {
        public VocabularyDetailPanel()
        {
            InitializeComponent();
        }

        // Ph∆∞∆°ng th·ª©c ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin c·ªßa m·ªôt t·ª´ v·ª±ng
        public void DisplayVocabulary(Vocabulary vocab)
        {
            if (vocab == null)
            {
                lblWord.Text = "T·ª´: ";
                lblMeaning.Text = "Nghƒ©a: ";
                lblPronunciation.Text = "Ph√°t √¢m: ";
                lblAudioUrl.Text = "Audio URL: ";
            }
            else
            {
                lblWord.Text = "T·ª´: " + vocab.Word;
                lblMeaning.Text = "Nghƒ©a: " + vocab.Meaning;
                lblPronunciation.Text = "Ph√°t √¢m: " + vocab.Pronunciation;
                lblAudioUrl.Text = "Audio URL: " + vocab.AudioUrl;
            }
        }
    }
}

VocabularyDetailPanel.Designer.cs:
namespace WordVaultAppMVC.Views
{
    partial class VocabularyDetailPanel
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        // Panel ch·ª©a to√†n b·ªô n·ªôi dung
        private System.Windows.Forms.Panel pnlContainer;
        private System.Windows.Forms.Label lblWord;
        private System.Windows.Forms.Label lblMeaning;
        private System.Windows.Forms.Label lblPronunciation;
        private System.Windows.Forms.Label lblAudioUrl;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        private void InitializeComponent()
        {
            this.pnlContainer = new System.Windows.Forms.Panel();
            this.lblWord = new System.Windows.Forms.Label();
            this.lblMeaning = new System.Windows.Forms.Label();
            this.lblPronunciation = new System.Windows.Forms.Label();
            this.lblAudioUrl = new System.Windows.Forms.Label();
            this.pnlContainer.SuspendLayout();
            this.SuspendLayout();
            // 
            // pnlContainer
            // 
            this.pnlContainer.BackColor = System.Drawing.Color.White;
            this.pnlContainer.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlContainer.Controls.Add(this.lblWord);
            this.pnlContainer.Controls.Add(this.lblMeaning);
            this.pnlContainer.Controls.Add(this.lblPronunciation);
            this.pnlContainer.Controls.Add(this.lblAudioUrl);
            this.pnlContainer.Dock = System.Windows.Forms.DockStyle.Fill;
            this.pnlContainer.Location = new System.Drawing.Point(0, 0);
            this.pnlContainer.Name = "pnlContainer";
            this.pnlContainer.Padding = new System.Windows.Forms.Padding(10);
            this.pnlContainer.Size = new System.Drawing.Size(400, 200);
            this.pnlContainer.TabIndex = 0;
            // 
            // lblWord
            // 
            this.lblWord.AutoSize = true;
            this.lblWord.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Bold);
            this.lblWord.Location = new System.Drawing.Point(20, 20);
            this.lblWord.Name = "lblWord";
            this.lblWord.Size = new System.Drawing.Size(60, 28);
            this.lblWord.TabIndex = 0;
            this.lblWord.Text = "T·ª´: ";
            // 
            // lblMeaning
            // 
            this.lblMeaning.AutoSize = true;
            this.lblMeaning.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.lblMeaning.Location = new System.Drawing.Point(20, 60);
            this.lblMeaning.Name = "lblMeaning";
            this.lblMeaning.Size = new System.Drawing.Size(90, 28);
            this.lblMeaning.TabIndex = 1;
            this.lblMeaning.Text = "Nghƒ©a: ";
            // 
            // lblPronunciation
            // 
            this.lblPronunciation.AutoSize = true;
            this.lblPronunciation.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.lblPronunciation.Location = new System.Drawing.Point(20, 100);
            this.lblPronunciation.Name = "lblPronunciation";
            this.lblPronunciation.Size = new System.Drawing.Size(135, 28);
            this.lblPronunciation.TabIndex = 2;
            this.lblPronunciation.Text = "Ph√°t √¢m: ";
            // 
            // lblAudioUrl
            // 
            this.lblAudioUrl.AutoSize = true;
            this.lblAudioUrl.Font = new System.Drawing.Font("Segoe UI", 12F);
            this.lblAudioUrl.Location = new System.Drawing.Point(20, 140);
            this.lblAudioUrl.Name = "lblAudioUrl";
            this.lblAudioUrl.Size = new System.Drawing.Size(115, 28);
            this.lblAudioUrl.TabIndex = 3;
            this.lblAudioUrl.Text = "Audio URL: ";
            // 
            // VocabularyDetailPanel
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.Controls.Add(this.pnlContainer);
            this.Name = "VocabularyDetailPanel";
            this.Size = new System.Drawing.Size(400, 200);
            this.pnlContainer.ResumeLayout(false);
            this.pnlContainer.PerformLayout();
            this.ResumeLayout(false);
        }

        #endregion
    }
}

VocabularyListForm.cs:
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using WordVaultAppMVC.Data;
using WordVaultAppMVC.Models;
using WordVaultAppMVC.Views; // ƒê·∫£m b·∫£o r·∫±ng VocabularyDetailPanel n·∫±m trong namespace n√†y

namespace WordVaultAppMVC.Views
{
    public partial class VocabularyListForm : Form
    {
        private VocabularyRepository _vocabRepo = new VocabularyRepository();
        private List<Vocabulary> _vocabList;

        public VocabularyListForm()
        {
            InitializeComponent();
            LoadVocabulary();
        }

        // T·∫£i danh s√°ch t·ª´ v·ª±ng t·ª´ c∆° s·ªü d·ªØ li·ªáu
        private void LoadVocabulary()
        {
            _vocabList = _vocabRepo.GetAllVocabulary();
            listBoxVocabulary.Items.Clear();

            foreach (var vocab in _vocabList)
            {
                listBoxVocabulary.Items.Add(vocab.Word);
            }

            if (_vocabList.Count > 0)
            {
                listBoxVocabulary.SelectedIndex = 0;
            }
            UpdateTotalLabel();
        }

        // C·∫≠p nh·∫≠t label hi·ªÉn th·ªã t·ªïng s·ªë t·ª´ v·ª±ng
        private void UpdateTotalLabel()
        {
            lblTotalVocabulary.Text = "T·ªïng s·ªë t·ª´: " + _vocabList.Count;
        }

        // Khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt t·ª´ trong ListBox, hi·ªÉn th·ªã chi ti·∫øt b·∫±ng VocabularyDetailPanel
        private void listBoxVocabulary_SelectedIndexChanged(object sender, EventArgs e)
        {
            int index = listBoxVocabulary.SelectedIndex;
            if (index >= 0 && index < _vocabList.Count)
            {
                vocabularyDetailPanel.DisplayVocabulary(_vocabList[index]);
            }
        }

        // N√∫t l√†m m·ªõi danh s√°ch t·ª´ v·ª±ng
        private void btnRefresh_Click(object sender, EventArgs e)
        {
            LoadVocabulary();
        }

        // N√∫t x√≥a t·ª´ v·ª±ng ƒë√£ ch·ªçn
        private void btnDelete_Click(object sender, EventArgs e)
        {
            int index = listBoxVocabulary.SelectedIndex;
            if (index < 0)
            {
                MessageBox.Show("Vui l√≤ng ch·ªçn t·ª´ v·ª±ng c·∫ßn x√≥a.", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            var vocab = _vocabList[index];
            var confirm = MessageBox.Show($"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·ª´ \"{vocab.Word}\"?", "X√°c nh·∫≠n x√≥a", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (confirm == DialogResult.Yes)
            {
                _vocabRepo.DeleteVocabulary(vocab.Id);
                MessageBox.Show("X√≥a t·ª´ v·ª±ng th√†nh c√¥ng!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Information);
                LoadVocabulary();
            }
        }
    }
}

VocabularyListForm.Designer.cs:
namespace WordVaultAppMVC.Views
{
    partial class VocabularyListForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.ListBox listBoxVocabulary;
        private WordVaultAppMVC.Views.VocabularyDetailPanel vocabularyDetailPanel;
        private System.Windows.Forms.Button btnDelete;
        private System.Windows.Forms.Button btnRefresh;
        private System.Windows.Forms.Label lblTotalVocabulary;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
                components.Dispose();
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.listBoxVocabulary = new System.Windows.Forms.ListBox();
            // Kh·ªüi t·∫°o vocabularyDetailPanel
            this.vocabularyDetailPanel = new WordVaultAppMVC.Views.VocabularyDetailPanel();
            this.btnDelete = new System.Windows.Forms.Button();
            this.btnRefresh = new System.Windows.Forms.Button();
            this.lblTotalVocabulary = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // listBoxVocabulary
            // 
            this.listBoxVocabulary.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.listBoxVocabulary.FormattingEnabled = true;
            this.listBoxVocabulary.ItemHeight = 23;
            this.listBoxVocabulary.Location = new System.Drawing.Point(20, 20);
            this.listBoxVocabulary.Name = "listBoxVocabulary";
            this.listBoxVocabulary.Size = new System.Drawing.Size(220, 372);
            this.listBoxVocabulary.TabIndex = 0;
            this.listBoxVocabulary.SelectedIndexChanged += new System.EventHandler(this.listBoxVocabulary_SelectedIndexChanged);
            // 
            // vocabularyDetailPanel
            // 
            this.vocabularyDetailPanel.Location = new System.Drawing.Point(260, 20);
            this.vocabularyDetailPanel.Name = "vocabularyDetailPanel";
            this.vocabularyDetailPanel.Size = new System.Drawing.Size(400, 200);
            this.vocabularyDetailPanel.TabIndex = 1;
            // 
            // btnDelete
            // 
            this.btnDelete.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Bold);
            this.btnDelete.Location = new System.Drawing.Point(260, 240);
            this.btnDelete.Name = "btnDelete";
            this.btnDelete.Size = new System.Drawing.Size(180, 40);
            this.btnDelete.TabIndex = 2;
            this.btnDelete.Text = "X√≥a t·ª´";
            this.btnDelete.UseVisualStyleBackColor = true;
            this.btnDelete.Click += new System.EventHandler(this.btnDelete_Click);
            // 
            // btnRefresh
            // 
            this.btnRefresh.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Bold);
            this.btnRefresh.Location = new System.Drawing.Point(450, 240);
            this.btnRefresh.Name = "btnRefresh";
            this.btnRefresh.Size = new System.Drawing.Size(180, 40);
            this.btnRefresh.TabIndex = 3;
            this.btnRefresh.Text = "L√†m m·ªõi";
            this.btnRefresh.UseVisualStyleBackColor = true;
            this.btnRefresh.Click += new System.EventHandler(this.btnRefresh_Click);
            // 
            // lblTotalVocabulary
            // 
            this.lblTotalVocabulary.AutoSize = true;
            this.lblTotalVocabulary.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.lblTotalVocabulary.ForeColor = System.Drawing.Color.Gray;
            this.lblTotalVocabulary.Location = new System.Drawing.Point(260, 300);
            this.lblTotalVocabulary.Name = "lblTotalVocabulary";
            this.lblTotalVocabulary.Size = new System.Drawing.Size(200, 23);
            this.lblTotalVocabulary.TabIndex = 4;
            this.lblTotalVocabulary.Text = "T·ªïng s·ªë t·ª´: [s·ªë t·ª´]";
            // 
            // VocabularyListForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
            this.ClientSize = new System.Drawing.Size(700, 420);
            this.Controls.Add(this.lblTotalVocabulary);
            this.Controls.Add(this.btnRefresh);
            this.Controls.Add(this.btnDelete);
            this.Controls.Add(this.vocabularyDetailPanel);
            this.Controls.Add(this.listBoxVocabulary);
            this.Name = "VocabularyListForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Danh s√°ch t·ª´ v·ª±ng";
            this.ResumeLayout(false);
            this.PerformLayout();
        }
    }
}

HomeControl.cs:
using System;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Windows.Forms;
using WordVaultAppMVC.Helpers;
using WordVaultAppMVC.Models;
using WordVaultAppMVC.Data;

namespace WordVaultAppMVC.Views.Controls
{
    public class HomeControl : UserControl
    {
        private TextBox txtSearch;
        private Label lblPronunciation;
        private Label lblMeaning;
        private Button btnSearch;
        private Button btnPlayAudio;
        private Button btnAddFavorite;
        private Button btnAddTopic;
        private WordDetails currentWord;

        public HomeControl()
        {
            InitializeComponents();
        }

        private void InitializeComponents()
        {
            this.Dock = DockStyle.Fill;

            var pnlSearch = new Panel { Dock = DockStyle.Top, Height = 60, Padding = new Padding(20, 10, 20, 10) };
            var pnlResult = new Panel { Dock = DockStyle.Fill, Padding = new Padding(20) };

            txtSearch = new TextBox
            {
                Font = new System.Drawing.Font("Segoe UI", 11F),
                Size = new System.Drawing.Size(300, 37),
                Location = new System.Drawing.Point(0, 15)
            };
            txtSearch.KeyDown += TxtSearch_KeyDown;

            btnSearch = new Button
            {
                Text = "T√¨m ki·∫øm",
                Font = new System.Drawing.Font("Segoe UI", 10F),
                Size = new System.Drawing.Size(106, 37),
                Location = new System.Drawing.Point(320, 15)
            };
            btnSearch.Click += async (s, e) => await SearchAndDisplayWordAsync();

            lblPronunciation = new Label
            {
                Text = "Ph√°t √¢m:",
                Font = new System.Drawing.Font("Segoe UI", 11F),
                Location = new System.Drawing.Point(0, 10),
                Size = new System.Drawing.Size(600, 25)
            };

            lblMeaning = new Label
            {
                Text = "Nghƒ©a ti·∫øng Vi·ªát:",
                Font = new System.Drawing.Font("Segoe UI", 11F),
                Location = new System.Drawing.Point(0, 50),
                Size = new System.Drawing.Size(600, 80)
            };

            btnPlayAudio = new Button
            {
                Text = "üîä Nghe ph√°t √¢m",
                Font = new System.Drawing.Font("Segoe UI", 10F),
                Size = new System.Drawing.Size(140, 45),
                Location = new System.Drawing.Point(5, 140)
            };
            btnPlayAudio.Click += BtnPlayAudio_Click;

            btnAddFavorite = new Button
            {
                Text = "‚≠ê Y√™u th√≠ch",
                Font = new System.Drawing.Font("Segoe UI", 10F),
                Size = new System.Drawing.Size(100, 45),
                Location = new System.Drawing.Point(160, 140)
            };
            btnAddFavorite.Click += BtnAddFavorite_Click;

            btnAddTopic = new Button
            {
                Text = "üìö Th√™m v√†o ch·ªß ƒë·ªÅ",
                Font = new System.Drawing.Font("Segoe UI", 10F),
                Size = new System.Drawing.Size(160, 45),
                Location = new System.Drawing.Point(270, 140)
            };
            btnAddTopic.Click += BtnAddTopic_Click;

            pnlSearch.Controls.Add(txtSearch);
            pnlSearch.Controls.Add(btnSearch);
            pnlResult.Controls.Add(lblPronunciation);
            pnlResult.Controls.Add(lblMeaning);
            pnlResult.Controls.Add(btnPlayAudio);
            pnlResult.Controls.Add(btnAddFavorite);
            pnlResult.Controls.Add(btnAddTopic);

            this.Controls.Add(pnlResult);
            this.Controls.Add(pnlSearch);
        }

        private async void TxtSearch_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                await SearchAndDisplayWordAsync();
            }
        }

        private async Task SearchAndDisplayWordAsync()
        {
            string searchTerm = txtSearch.Text.Trim();

            if (string.IsNullOrEmpty(searchTerm))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p t·ª´ c·∫ßn t√¨m.");
                return;
            }

            var result = await DictionaryApiClient.GetWordDetailsAsync(searchTerm);

            if (result != null)
            {
                result.Meaning = await DictionaryApiClient.TranslateToVietnamese(result.Meaning);
                lblPronunciation.Text = "Ph√°t √¢m: " + result.Pronunciation;
                lblMeaning.Text = "Nghƒ©a ti·∫øng Vi·ªát: " + result.Meaning;
                currentWord = result;
                SaveWordToDatabase(result);
            }
            else
            {
                MessageBox.Show("Kh√¥ng t√¨m th·∫•y t·ª´ n√†y trong t·ª´ ƒëi·ªÉn.");
            }
        }

        private void SaveWordToDatabase(WordDetails wordDetails)
        {
            using (var connection = DatabaseContext.GetConnection())
            {
                connection.Open();
                var checkQuery = "SELECT COUNT(*) FROM dbo.Vocabulary WHERE Word = @Word";
                using (var checkCommand = new SqlCommand(checkQuery, connection))
                {
                    checkCommand.Parameters.AddWithValue("@Word", wordDetails.Word);
                    int count = (int)checkCommand.ExecuteScalar();
                    if (count > 0) return;
                }

                var insertQuery = "INSERT INTO dbo.Vocabulary (Word, Pronunciation, AudioUrl, Meaning) VALUES (@Word, @Pronunciation, @AudioUrl, @Meaning)";
                using (var insertCommand = new SqlCommand(insertQuery, connection))
                {
                    insertCommand.Parameters.AddWithValue("@Word", wordDetails.Word);
                    insertCommand.Parameters.AddWithValue("@Pronunciation", wordDetails.Pronunciation);
                    insertCommand.Parameters.AddWithValue("@AudioUrl", wordDetails.AudioUrl);
                    insertCommand.Parameters.AddWithValue("@Meaning", wordDetails.Meaning);
                    insertCommand.ExecuteNonQuery();
                }
            }
        }

        private void BtnPlayAudio_Click(object sender, EventArgs e)
        {
            string audioUrl = GetAudioUrlFromDb();
            if (!string.IsNullOrEmpty(audioUrl))
            {
                AudioHelper.PlayAudio(audioUrl);
            }
            else
            {
                MessageBox.Show("Kh√¥ng c√≥ √¢m thanh ƒë·ªÉ ph√°t.");
            }
        }

        private string GetAudioUrlFromDb()
        {
            string audioUrl = "";
            using (var connection = DatabaseContext.GetConnection())
            {
                connection.Open();
                var query = "SELECT AudioUrl FROM Vocabulary WHERE Word = @Word";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Word", txtSearch.Text.Trim());
                    var result = command.ExecuteScalar();
                    if (result != null)
                    {
                        audioUrl = result.ToString();
                    }
                }
            }
            return audioUrl;
        }

        private void BtnAddFavorite_Click(object sender, EventArgs e)
        {
            if (currentWord == null)
            {
                MessageBox.Show("H√£y t√¨m ki·∫øm t·ª´ tr∆∞·ªõc khi th√™m v√†o Y√™u th√≠ch.");
                return;
            }
            using (var conn = DatabaseContext.GetConnection())
            {
                conn.Open();
                var cmd = new SqlCommand("INSERT INTO FavoriteWords (WordId) SELECT Id FROM Vocabulary WHERE Word = @Word", conn);
                cmd.Parameters.AddWithValue("@Word", currentWord.Word);
                try
                {
                    cmd.ExecuteNonQuery();
                    MessageBox.Show("‚≠ê ƒê√£ th√™m v√†o Y√™u th√≠ch!");
                }
                catch
                {
                    MessageBox.Show("T·ª´ n√†y ƒë√£ c√≥ trong danh s√°ch y√™u th√≠ch.");
                }
            }
        }

        private void BtnAddTopic_Click(object sender, EventArgs e)
        {
            if (currentWord == null)
            {
                MessageBox.Show("H√£y t√¨m ki·∫øm t·ª´ tr∆∞·ªõc khi th√™m v√†o ch·ªß ƒë·ªÅ.");
                return;
            }
            var form = new AddToTopicForm(currentWord.Word);
            form.ShowDialog();
        }
    }
}



TopicVocabularyControl:
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Windows.Forms;
using WordVaultAppMVC.Data;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Views.Controls
{
    public class TopicVocabularyControl : UserControl
    {
        private ComboBox cboTopics;
        private ListView lstWords;
        private TextBox txtNewWord;
        private Button btnAdd;

        public TopicVocabularyControl(string defaultTopic = null)
        {
            InitializeComponent();
            LoadTopics();

            if (!string.IsNullOrEmpty(defaultTopic))
                cboTopics.SelectedItem = defaultTopic;
        }

        private void InitializeComponent()
        {
            this.Dock = DockStyle.Fill;

            cboTopics = new ComboBox { Location = new System.Drawing.Point(20, 20), Width = 200, DropDownStyle = ComboBoxStyle.DropDownList };
            cboTopics.SelectedIndexChanged += (s, e) => LoadWordsByTopic();

            txtNewWord = new TextBox { Location = new System.Drawing.Point(240, 20), Width = 200 };
            btnAdd = new Button { Text = "‚ûï Th√™m t·ª´", Location = new System.Drawing.Point(460, 18), Width = 100 };
            btnAdd.Click += BtnAdd_Click;

            lstWords = new ListView
            {
                View = View.Details,
                Location = new System.Drawing.Point(20, 70),
                Size = new System.Drawing.Size(540, 300),
                FullRowSelect = true
            };
            lstWords.Columns.Add("T·ª´ v·ª±ng", 160);
            lstWords.Columns.Add("Ph√°t √¢m", 150);
            lstWords.Columns.Add("Nghƒ©a ti·∫øng Vi·ªát", 220);

            this.Controls.AddRange(new Control[] { cboTopics, txtNewWord, btnAdd, lstWords });
        }

        private void LoadTopics()
        {
            cboTopics.Items.Clear();
            using (var conn = DatabaseContext.GetConnection())
            {
                conn.Open();
                var cmd = new SqlCommand("SELECT Name FROM Topics", conn);
                var reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    cboTopics.Items.Add(reader.GetString(0));
                }
            }
            if (cboTopics.Items.Count > 0) cboTopics.SelectedIndex = 0;
        }

        private void LoadWordsByTopic()
        {
            lstWords.Items.Clear();
            string topic = cboTopics.SelectedItem?.ToString();
            if (string.IsNullOrEmpty(topic)) return;

            using (var conn = DatabaseContext.GetConnection())
            {
                conn.Open();
                var sql = @"SELECT V.Word, V.Pronunciation, V.Meaning
                             FROM Vocabulary V
                             JOIN VocabularyTopic VT ON V.Id = VT.VocabularyId
                             JOIN Topics T ON T.Id = VT.TopicId
                             WHERE T.Name = @Topic";
                var cmd = new SqlCommand(sql, conn);
                cmd.Parameters.AddWithValue("@Topic", topic);
                var reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    var item = new ListViewItem(reader.GetString(0));
                    item.SubItems.Add(reader.IsDBNull(1) ? "" : reader.GetString(1));
                    item.SubItems.Add(reader.IsDBNull(2) ? "" : reader.GetString(2));
                    lstWords.Items.Add(item);
                }
            }
        }

        private void BtnAdd_Click(object sender, EventArgs e)
        {
            string word = txtNewWord.Text.Trim();
            string topic = cboTopics.SelectedItem?.ToString();
            if (string.IsNullOrWhiteSpace(word) || string.IsNullOrEmpty(topic))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p t·ª´ v√† ch·ªçn ch·ªß ƒë·ªÅ.");
                return;
            }

            int wordId = -1;
            int topicId = -1;

            using (var conn = DatabaseContext.GetConnection())
            {
                conn.Open();
                // L·∫•y Id c·ªßa t·ª´ (n·∫øu c√≥)
                var cmd = new SqlCommand("SELECT Id FROM Vocabulary WHERE Word = @Word", conn);
                cmd.Parameters.AddWithValue("@Word", word);
                var result = cmd.ExecuteScalar();
                if (result == null)
                {
                    MessageBox.Show("T·ª´ ch∆∞a c√≥ trong c∆° s·ªü d·ªØ li·ªáu. H√£y t√¨m ki·∫øm tr∆∞·ªõc ·ªü Home.");
                    return;
                }
                wordId = (int)result;

                cmd = new SqlCommand("SELECT Id FROM Topics WHERE Name = @Topic", conn);
                cmd.Parameters.AddWithValue("@Topic", topic);
                topicId = (int)(cmd.ExecuteScalar() ?? -1);

                if (wordId == -1 || topicId == -1) return;

                cmd = new SqlCommand("SELECT COUNT(*) FROM VocabularyTopic WHERE VocabularyId = @VId AND TopicId = @TId", conn);
                cmd.Parameters.AddWithValue("@VId", wordId);
                cmd.Parameters.AddWithValue("@TId", topicId);
                int exists = (int)cmd.ExecuteScalar();
                if (exists > 0)
                {
                    MessageBox.Show("T·ª´ ƒë√£ n·∫±m trong ch·ªß ƒë·ªÅ n√†y.");
                    return;
                }

                cmd = new SqlCommand("INSERT INTO VocabularyTopic (VocabularyId, TopicId) VALUES (@VId, @TId)", conn);
                cmd.Parameters.AddWithValue("@VId", wordId);
                cmd.Parameters.AddWithValue("@TId", topicId);
                cmd.ExecuteNonQuery();
            }

            txtNewWord.Clear();
            LoadWordsByTopic();
        }
    }
}

FavoriteWordsControl:
using System.Windows.Forms;

namespace WordVaultAppMVC.Views.Controls
{
    public class FavoriteWordsControl : UserControl
    {
        public FavoriteWordsControl()
        {
            this.Dock = DockStyle.Fill;
            var form = new FavoriteWordsForm()
            {
                TopLevel = false,
                FormBorderStyle = FormBorderStyle.None,
                Dock = DockStyle.Fill
            };
            this.Controls.Add(form);
            form.Show();
        }
    }
}

DailyReviewControl:
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Windows.Forms;
using WordVaultAppMVC.Data;
using WordVaultAppMVC.Models;

namespace WordVaultAppMVC.Views.Controls
{
    public class DailyReviewControl : UserControl
    {
        private ComboBox cboTopics;
        private NumericUpDown numWordCount;
        private Button btnStart;
        private Label lblWord;
        private Label lblMeaning;
        private Label lblPronunciation;
        private Button btnNext;

        private List<WordDetails> currentWordList = new List<WordDetails>();
        private int currentIndex = -1;

        public DailyReviewControl()
        {
            InitializeComponent();
            LoadTopics();
        }

        private void InitializeComponent()
        {
            this.Dock = DockStyle.Fill;
            cboTopics = new ComboBox { Location = new System.Drawing.Point(20, 20), Width = 200 };
            numWordCount = new NumericUpDown { Location = new System.Drawing.Point(240, 20), Width = 80, Minimum = 1, Maximum = 100, Value = 5 };
            btnStart = new Button { Text = "B·∫Øt ƒë·∫ßu h·ªçc", Location = new System.Drawing.Point(340, 20) };
            btnStart.Click += BtnStart_Click;
            lblWord = new Label { Text = "T·ª´:", Font = new System.Drawing.Font("Segoe UI", 16F), Location = new System.Drawing.Point(20, 80), AutoSize = true };
            lblPronunciation = new Label { Text = "Ph√°t √¢m:", Location = new System.Drawing.Point(20, 120), AutoSize = true };
            lblMeaning = new Label { Text = "Nghƒ©a:", Location = new System.Drawing.Point(20, 160), AutoSize = true };
            btnNext = new Button { Text = "Ti·∫øp theo", Location = new System.Drawing.Point(20, 200) };
            btnNext.Click += BtnNext_Click;
            this.Controls.AddRange(new Control[] { cboTopics, numWordCount, btnStart, lblWord, lblPronunciation, lblMeaning, btnNext });
        }

        private void LoadTopics()
        {
            using (var conn = DatabaseContext.GetConnection())
            {
                conn.Open();
                using (var cmd = new SqlCommand("SELECT Name FROM Topics", conn))
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read()) cboTopics.Items.Add(reader.GetString(0));
                }
            }
            if (cboTopics.Items.Count > 0) cboTopics.SelectedIndex = 0;
        }

        private void BtnStart_Click(object sender, EventArgs e)
        {
            var topic = cboTopics.SelectedItem?.ToString();
            currentWordList = GetWordsByTopic(topic, (int)numWordCount.Value);
            currentIndex = -1;
            BtnNext_Click(null, null);
        }

        private List<WordDetails> GetWordsByTopic(string topic, int count)
        {
            var words = new List<WordDetails>();
            using (var conn = DatabaseContext.GetConnection())
            {
                conn.Open();
                string sql = @"SELECT TOP (@Count) V.Word, V.Pronunciation, V.Meaning
                               FROM Vocabulary V
                               JOIN VocabularyTopic VT ON V.Id = VT.VocabularyId
                               JOIN Topics T ON T.Id = VT.TopicId
                               WHERE T.Name = @Topic
                               ORDER BY NEWID()";
                using (var cmd = new SqlCommand(sql, conn))
                {
                    cmd.Parameters.AddWithValue("@Count", count);
                    cmd.Parameters.AddWithValue("@Topic", topic);
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                            words.Add(new WordDetails { Word = reader.GetString(0), Pronunciation = reader.GetString(1), Meaning = reader.GetString(2) });
                    }
                }
            }
            return words;
        }

        private void BtnNext_Click(object sender, EventArgs e)
        {
            if (currentWordList.Count == 0) return;
            currentIndex++;
            if (currentIndex >= currentWordList.Count)
            {
                MessageBox.Show("ƒê√£ h·∫øt t·ª´ ƒë·ªÉ h·ªçc.");
                return;
            }
            var w = currentWordList[currentIndex];
            lblWord.Text = "T·ª´: " + w.Word;
            lblPronunciation.Text = "Ph√°t √¢m: " + w.Pronunciation;
            lblMeaning.Text = "Nghƒ©a: " + w.Meaning;
        }
    }
}

ShuffleStudyControl:
using System;
using System.Windows.Forms;
using WordVaultAppMVC.Services;

namespace WordVaultAppMVC.Views.Controls
{
    public class ShuffleStudyControl : UserControl
    {
        private Label lblWord, lblRemainingWords;
        private Button btnNextWord, btnShowMeaning, btnCheckMeaning;
        private string currentWord;
        private string currentWordId;
        private int remainingWordsCount;
        private readonly VocabularyService vocabularyService;

        public ShuffleStudyControl()
        {
            this.Dock = DockStyle.Fill;
            vocabularyService = new VocabularyService();
            remainingWordsCount = 10; // S·ªë t·ª´ m·∫∑c ƒë·ªãnh
            InitializeComponent();
            LoadNextWord();
        }

        private void InitializeComponent()
        {
            var pnlHeader = new Panel
            {
                BackColor = System.Drawing.Color.FromArgb(52, 152, 219),
                Dock = DockStyle.Top,
                Height = 60
            };

            var lblAppTitle = new Label
            {
                Text = "üìö H·ªçc Ng·∫´u Nhi√™n T·ª´ V·ª±ng",
                Font = new System.Drawing.Font("Segoe UI", 16F, System.Drawing.FontStyle.Bold),
                ForeColor = System.Drawing.Color.White,
                AutoSize = true,
                Location = new System.Drawing.Point(20, 15)
            };
            pnlHeader.Controls.Add(lblAppTitle);

            var pnlMain = new Panel
            {
                Dock = DockStyle.Fill,
                Padding = new Padding(20)
            };

            lblWord = new Label
            {
                Font = new System.Drawing.Font("Segoe UI", 14F),
                Text = "T·ª´ hi·ªán t·∫°i:",
                AutoSize = true,
                Location = new System.Drawing.Point(0, 10)
            };

            btnCheckMeaning = new Button
            {
                Text = "üß† Ki·ªÉm tra nghƒ©a",
                Font = new System.Drawing.Font("Segoe UI", 10F),
                Location = new System.Drawing.Point(60, 80),
                Size = new System.Drawing.Size(120, 40)
            };
            btnCheckMeaning.Click += BtnCheckMeaning_Click;

            btnShowMeaning = new Button
            {
                Text = "üìñ Hi·ªÉn th·ªã nghƒ©a",
                Font = new System.Drawing.Font("Segoe UI", 10F),
                Location = new System.Drawing.Point(200, 80),
                Size = new System.Drawing.Size(120, 40)
            };
            btnShowMeaning.Click += BtnShowMeaning_Click;

            btnNextWord = new Button
            {
                Text = "‚û°Ô∏è Ti·∫øp theo",
                Font = new System.Drawing.Font("Segoe UI", 10F),
                Location = new System.Drawing.Point(340, 80),
                Size = new System.Drawing.Size(120, 40)
            };
            btnNextWord.Click += BtnNextWord_Click;

            lblRemainingWords = new Label
            {
                Text = "C√≤n l·∫°i: 10 t·ª´",
                Font = new System.Drawing.Font("Segoe UI", 10F),
                ForeColor = System.Drawing.Color.Gray,
                AutoSize = true,
                Location = new System.Drawing.Point(0, 150)
            };

            pnlMain.Controls.AddRange(new Control[]
            {
                lblWord,
                btnCheckMeaning,
                btnShowMeaning,
                btnNextWord,
                lblRemainingWords
            });

            this.Controls.Add(pnlMain);
            this.Controls.Add(pnlHeader);
        }

        private void LoadNextWord()
        {
            if (remainingWordsCount <= 0)
            {
                lblWord.Text = "üéâ B·∫°n ƒë√£ ho√†n th√†nh bu·ªïi h·ªçc!";
                lblRemainingWords.Text = "";
                DisableButtons();
                return;
            }

            currentWord = vocabularyService.GetRandomWord(out currentWordId);

            if (string.IsNullOrEmpty(currentWord))
            {
                MessageBox.Show("Kh√¥ng t√¨m th·∫•y t·ª´ n√†o ƒë·ªÉ h·ªçc. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Information);
                DisableButtons();
                return;
            }

            lblWord.Text = $"T·ª´ hi·ªán t·∫°i: {currentWord}";
            lblRemainingWords.Text = $"C√≤n l·∫°i: {remainingWordsCount} t·ª´";
        }

        private void BtnNextWord_Click(object sender, EventArgs e)
        {
            remainingWordsCount--;
            LoadNextWord();
        }

        private void BtnShowMeaning_Click(object sender, EventArgs e)
        {
            string meaning = vocabularyService.GetWordMeaning(currentWordId);
            if (!string.IsNullOrEmpty(meaning))
            {
                MessageBox.Show($"üìò Nghƒ©a c·ªßa t·ª´ '{currentWord}':\n\n{meaning}", "Nghƒ©a t·ª´ v·ª±ng", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("Kh√¥ng c√≥ nghƒ©a n√†o ƒë∆∞·ª£c t√¨m th·∫•y!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void BtnCheckMeaning_Click(object sender, EventArgs e)
        {
            string userInput = Microsoft.VisualBasic.Interaction.InputBox(
                $"B·∫°n h√£y nh·∫≠p nghƒ©a c·ªßa t·ª´ '{currentWord}':",
                "üìù Ki·ªÉm tra Nghƒ©a",
                ""
            );

            if (string.IsNullOrWhiteSpace(userInput))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p nghƒ©a ƒë·ªÉ ki·ªÉm tra!", "Th√¥ng b√°o", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string correctMeaning = vocabularyService.GetWordMeaning(currentWordId);

            if (userInput.Trim().Equals(correctMeaning, StringComparison.OrdinalIgnoreCase))
            {
                MessageBox.Show("‚úÖ Ch√≠nh x√°c!", "K·∫øt qu·∫£", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show($"‚ùå Sai r·ªìi!\nNghƒ©a ƒë√∫ng l√†:\n\n{correctMeaning}", "K·∫øt qu·∫£", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void DisableButtons()
        {
            btnNextWord.Enabled = false;
            btnShowMeaning.Enabled = false;
            btnCheckMeaning.Enabled = false;
        }
    }
}


QuizControl:
// üîπ QuizControl.cs (n√¢ng c·∫•p: luu dap an rieng, chon cau, nop bai tinh diem + luy·ªán l·∫°i t·ª´ sai)
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows.Forms;
using WordVaultAppMVC.Data;
using WordVaultAppMVC.Models;
using WordVaultAppMVC.Controllers;

namespace WordVaultAppMVC.Views.Controls
{
    public class QuizControl : UserControl
    {
        private ComboBox cboTopic;
        private NumericUpDown numQuestionCount;
        private Button btnStart;
        private Label lblQuestion, lblProgress, lblFeedback;
        private RadioButton[] rdoOptions;
        private Button btnBack, btnNext, btnSubmitQuiz, btnRetryWrong;
        private FlowLayoutPanel pnlJumpButtons, pnlMatrix;

        private List<Vocabulary> questions;
        private Dictionary<int, string> userAnswers = new Dictionary<int, string>();
        private List<Vocabulary> wrongWords = new List<Vocabulary>();
        private int currentIndex = 0;

        public QuizControl()
        {
            InitializeComponent();
            LoadTopics();
        }

        private void InitializeComponent()
        {
            this.Dock = DockStyle.Fill;

            cboTopic = new ComboBox { Location = new System.Drawing.Point(20, 20), Width = 200 };
            numQuestionCount = new NumericUpDown { Location = new System.Drawing.Point(240, 20), Minimum = 1, Maximum = 100, Value = 5 };
            btnStart = new Button { Text = "B·∫Øt ƒë·∫ßu Quiz", Location = new System.Drawing.Point(360, 18) };
            btnStart.Click += BtnStart_Click;

            lblQuestion = new Label { Font = new System.Drawing.Font("Segoe UI", 14F), Location = new System.Drawing.Point(20, 70), AutoSize = true };
            lblProgress = new Label { Font = new System.Drawing.Font("Segoe UI", 10F), Location = new System.Drawing.Point(20, 110), AutoSize = true };

            rdoOptions = new RadioButton[4];
            for (int i = 0; i < 4; i++)
            {
                rdoOptions[i] = new RadioButton { Location = new System.Drawing.Point(40, 150 + i * 30), AutoSize = true };
                rdoOptions[i].CheckedChanged += Option_CheckedChanged;
                this.Controls.Add(rdoOptions[i]);
            }

            btnBack = new Button { Text = "‚¨ÖÔ∏è Quay l·∫°i", Location = new System.Drawing.Point(20, 280) };
            btnBack.Click += (sender, args) => { SaveAnswer(); currentIndex = (currentIndex - 1 + questions.Count) % questions.Count; LoadQuestion(); };

            btnNext = new Button { Text = "‚û°Ô∏è Ti·∫øp", Location = new System.Drawing.Point(140, 280) };
            btnNext.Click += (sender, args) => { SaveAnswer(); currentIndex = (currentIndex + 1) % questions.Count; LoadQuestion(); };

            btnSubmitQuiz = new Button { Text = "üìú N·ªôp b√†i", Location = new System.Drawing.Point(260, 280) };
            btnSubmitQuiz.Click += SubmitQuiz;

            btnRetryWrong = new Button { Text = "üîÅ Luy·ªán l·∫°i t·ª´ sai", Location = new System.Drawing.Point(380, 280), Visible = false };
            btnRetryWrong.Click += RetryWrongAnswers;

            lblFeedback = new Label { Location = new System.Drawing.Point(20, 320), AutoSize = true };

            pnlJumpButtons = new FlowLayoutPanel
            {
                Location = new System.Drawing.Point(20, 360),
                Width = 500,
                Height = 60,
                AutoScroll = true,
                WrapContents = false,
                FlowDirection = FlowDirection.LeftToRight
            };

            pnlMatrix = new FlowLayoutPanel
            {
                Location = new System.Drawing.Point(20, 430),
                Width = 500,
                Height = 60,
                AutoScroll = true,
                WrapContents = false,
                FlowDirection = FlowDirection.LeftToRight
            };

            this.Controls.AddRange(new Control[]
            {
                cboTopic, numQuestionCount, btnStart, lblQuestion, lblProgress,
                btnBack, btnNext, btnSubmitQuiz, btnRetryWrong, lblFeedback,
                pnlJumpButtons, pnlMatrix
            });
        }

        private void LoadTopics()
        {
            cboTopic.Items.Clear();
            var topics = new TopicRepository().GetAllTopics();
            foreach (var topic in topics)
            {
                cboTopic.Items.Add(topic.Name);
            }
            if (cboTopic.Items.Count > 0) cboTopic.SelectedIndex = 0;
        }

        private void BtnStart_Click(object sender, EventArgs e)
        {
            string selectedTopic = cboTopic.SelectedItem?.ToString();
            if (string.IsNullOrEmpty(selectedTopic)) return;

            int count = (int)numQuestionCount.Value;
            questions = new VocabularyRepository()
                .GetVocabularyByTopic(selectedTopic)
                .OrderBy(_ => Guid.NewGuid()).Take(count).ToList();

            currentIndex = 0;
            userAnswers.Clear();
            pnlJumpButtons.Controls.Clear();
            pnlMatrix.Controls.Clear();
            btnRetryWrong.Visible = false;
            wrongWords.Clear();

            for (int i = 0; i < questions.Count; i++)
            {
                var btn = new Button { Text = (i + 1).ToString(), Width = 40, Height = 30, Tag = i };
                btn.Click += (s, ev) => { SaveAnswer(); currentIndex = (int)((Button)s).Tag; LoadQuestion(); };
                pnlJumpButtons.Controls.Add(btn);
            }

            LoadQuestion();
        }

        private void LoadQuestion()
        {
            if (questions == null || questions.Count == 0 || currentIndex >= questions.Count) return;

            var q = questions[currentIndex];
            lblQuestion.Text = "T·ª´: " + q.Word;
            lblProgress.Text = $"C√¢u {currentIndex + 1}/{questions.Count}";
            lblFeedback.Text = "";

            var repo = new VocabularyRepository();
            var wrongAnswers = repo.GetAllVocabulary()
                .Where(v => v.Word != q.Word && !string.IsNullOrEmpty(v.Meaning))
                .Select(v => v.Meaning)
                .Distinct()
                .OrderBy(_ => Guid.NewGuid())
                .Take(3)
                .ToList();

            wrongAnswers.Add(q.Meaning);
            var allAnswers = wrongAnswers.OrderBy(_ => Guid.NewGuid()).Take(4).ToList();

            for (int i = 0; i < rdoOptions.Length; i++)
            {
                rdoOptions[i].CheckedChanged -= Option_CheckedChanged;
                rdoOptions[i].Text = i < allAnswers.Count ? allAnswers[i] : "";
                rdoOptions[i].Checked = userAnswers.TryGetValue(currentIndex, out var saved) && saved == rdoOptions[i].Text;
                rdoOptions[i].CheckedChanged += Option_CheckedChanged;
            }
        }

        private void Option_CheckedChanged(object sender, EventArgs e)
        {
            SaveAnswer();
        }

        private void SaveAnswer()
        {
            var selected = rdoOptions.FirstOrDefault(r => r.Checked);
            if (selected != null)
            {
                userAnswers[currentIndex] = selected.Text;
            }
        }

        private void SubmitQuiz(object sender, EventArgs e)
        {
            int correct = 0;
            wrongWords.Clear();

            for (int i = 0; i < questions.Count; i++)
            {
                var word = questions[i];
                var selectedAnswer = userAnswers.ContainsKey(i) ? userAnswers[i] : null;
                bool isCorrect = selectedAnswer == word.Meaning;
                if (isCorrect)
                {
                    correct++;
                    new LearningController().UpdateLearningStatus(word.Id.ToString(), "ƒê√£ h·ªçc");
                }
                else
                {
                    wrongWords.Add(word);
                    new LearningController().UpdateLearningStatus(word.Id.ToString(), "ƒêang h·ªçc");
                }
            }

            MessageBox.Show($"‚úÖ Ho√†n th√†nh Quiz.\nƒêi·ªÉm: {correct}/{questions.Count} ƒë√∫ng.", "K·∫øt qu·∫£", MessageBoxButtons.OK, MessageBoxIcon.Information);
            btnRetryWrong.Visible = wrongWords.Count > 0;
        }

        private void RetryWrongAnswers(object sender, EventArgs e)
        {
            questions = wrongWords;
            currentIndex = 0;
            userAnswers.Clear();
            pnlJumpButtons.Controls.Clear();
            pnlMatrix.Controls.Clear();

            for (int i = 0; i < questions.Count; i++)
            {
                var btn = new Button { Text = (i + 1).ToString(), Width = 40, Height = 30, Tag = i };
                btn.Click += (s, ev) => { SaveAnswer(); currentIndex = (int)((Button)s).Tag; LoadQuestion(); };
                pnlJumpButtons.Controls.Add(btn);
            }

            LoadQuestion();
        }
    }
}




SettingsControl:
using System.Windows.Forms;

namespace WordVaultAppMVC.Views.Controls
{
    public class SettingsControl : UserControl
    {
        public SettingsControl()
        {
            this.Dock = DockStyle.Fill;
            Label lbl = new Label
            {
                Text = "‚öôÔ∏è C√†i ƒë·∫∑t ·ª©ng d·ª•ng (ƒëang ph√°t tri·ªÉn)",
                Dock = DockStyle.Fill,
                Font = new System.Drawing.Font("Segoe UI", 16F, System.Drawing.FontStyle.Bold),
                TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            };
            this.Controls.Add(lbl);
        }
    }
}


App.config:
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" />
    </startup>
    <connectionStrings>
        <add name="WordVaultDb" connectionString="Data Source=MRNGUYEN\SQLEXPRESS;Initial Catalog=WordVaultDb;User ID=sa;Password=12345678;Integrated Security=True" providerName="System.Data.SqlClient="/>
    </connectionStrings>
</configuration>

Database:
-- T·∫°o b·∫£ng Vocabulary: L∆∞u tr·ªØ danh s√°ch t·ª´ v·ª±ng
CREATE TABLE dbo.Vocabulary (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Word NVARCHAR(100) NOT NULL,
    Meaning NVARCHAR(500) NOT NULL,
    Pronunciation NVARCHAR(100) NULL,
    AudioUrl NVARCHAR(300) NULL
);
GO

-- T·∫°o b·∫£ng Topics: L∆∞u tr·ªØ c√°c ch·ªß ƒë·ªÅ t·ª´ v·ª±ng
CREATE TABLE dbo.Topics (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL
);
GO

-- T·∫°o b·∫£ng VocabularyTopic: B·∫£ng li√™n k·∫øt gi·ªØa b·∫£ng Vocabulary v√† Topics (quan h·ªá nhi·ªÅu - nhi·ªÅu)
CREATE TABLE dbo.VocabularyTopic (
    VocabularyId INT NOT NULL,
    TopicId INT NOT NULL,
    PRIMARY KEY (VocabularyId, TopicId),
    CONSTRAINT FK_VocabularyTopic_Vocabulary FOREIGN KEY (VocabularyId) REFERENCES dbo.Vocabulary(Id),
    CONSTRAINT FK_VocabularyTopic_Topics FOREIGN KEY (TopicId) REFERENCES dbo.Topics(Id)
);
GO

-- T·∫°o b·∫£ng QuizQuestions: L∆∞u tr·ªØ c√°c c√¢u h·ªèi cho b√†i quiz
CREATE TABLE dbo.QuizQuestions (
    QuizId INT IDENTITY(1,1) PRIMARY KEY,
    QuestionText NVARCHAR(1000) NOT NULL,
    Option1 NVARCHAR(500) NOT NULL,
    Option2 NVARCHAR(500) NOT NULL,
    Option3 NVARCHAR(500) NOT NULL,
    Option4 NVARCHAR(500) NOT NULL,
    CorrectOption INT NOT NULL
);
GO

-- T·∫°o b·∫£ng QuizResults: L∆∞u tr·ªØ k·∫øt qu·∫£ l√†m b√†i quiz c·ªßa ng∆∞·ªùi d√πng
CREATE TABLE dbo.QuizResults (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    QuizId INT NOT NULL,
    IsCorrect BIT NOT NULL,
    DateTaken DATETIME NOT NULL,
    UserId NVARCHAR(50) NULL,
    CONSTRAINT FK_QuizResults_QuizQuestions FOREIGN KEY (QuizId) REFERENCES dbo.QuizQuestions(QuizId)
);
GO

-- T·∫°o b·∫£ng LearningStatuses: L∆∞u tr·ªØ tr·∫°ng th√°i h·ªçc c·ªßa t·ª´ v·ª±ng
CREATE TABLE dbo.LearningStatuses (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    WordId NVARCHAR(50) NOT NULL,
    UserId NVARCHAR(50) NULL,
    Status NVARCHAR(50) NOT NULL,
    DateLearned DATETIME NOT NULL
);
GO
